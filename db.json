{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/icon_wechat.png","path":"img/icon_wechat.png","modified":0,"renderable":0},{"_id":"source/img/404-bg.jpg","path":"img/404-bg.jpg","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/beantech.css","path":"css/beantech.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/archive.styl","path":"css/archive.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/beantech.min.css","path":"css/beantech.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/hux-blog.min.css","path":"css/hux-blog.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/rocket.styl","path":"css/rocket.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/signature.styl","path":"css/signature.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/toc.styl","path":"css/toc.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/widget.styl","path":"css/widget.styl","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.js","path":"js/hux-blog.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/hux-blog.min.js","path":"js/hux-blog.min.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.nav.js","path":"js/jquery.nav.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","path":"js/jquery.tagcloud.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/toc.js","path":"js/toc.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"source/img/header_img/Iron-Man-3.jpg","path":"img/header_img/Iron-Man-3.jpg","modified":0,"renderable":0},{"_id":"source/img/ironman-draw.png","path":"img/ironman-draw.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/bootstrap.js","path":"js/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"source/img/contact-bg.jpg","path":"img/contact-bg.jpg","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-white.png","path":"img/signature/BeanTechSign-white.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/css/bootstrap.css","path":"css/bootstrap.css","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/ironman.png","path":"css/images/ironman.png","modified":0,"renderable":1},{"_id":"themes/beantech/source/css/images/rocket.png","path":"css/images/rocket.png","modified":0,"renderable":1},{"_id":"source/img/header_img/tf-logo-dark.png","path":"img/header_img/tf-logo-dark.png","modified":0,"renderable":0},{"_id":"source/img/signature/BeanTechSign-black.png","path":"img/signature/BeanTechSign-black.png","modified":0,"renderable":0},{"_id":"themes/beantech/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/beantech/source/fonts/NANUMSQUAREROUNDB.TTF","path":"fonts/NANUMSQUAREROUNDB.TTF","modified":0,"renderable":1},{"_id":"source/img/header_img/bg_computer.jpg","path":"img/header_img/bg_computer.jpg","modified":0,"renderable":0},{"_id":"source/img/header_img/bg_computer.png","path":"img/header_img/bg_computer.png","modified":0,"renderable":0},{"_id":"source/img/beantech-desktop.png","path":"img/beantech-desktop.png","modified":0,"renderable":0},{"_id":"source/img/header_img/tag-bg.png","path":"img/header_img/tag-bg.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-o.png","path":"img/header_img/home-bg-o.png","modified":0,"renderable":0},{"_id":"source/img/header_img/home-bg-2-dark.png","path":"img/header_img/home-bg-2-dark.png","modified":0,"renderable":0},{"_id":"source/img/header_img/archive-bg.png","path":"img/header_img/archive-bg.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/404.md","hash":"8d0d831a77fe92a9e1530366ed90dec6d73d3aef","modified":1543851545788},{"_id":"source/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1543851545789},{"_id":"themes/beantech/LICENSE","hash":"c48eaae47a703282e0ffe7b91d69366452046214","modified":1543851545919},{"_id":"themes/beantech/_config.yml","hash":"36340a31ee7c937aa8d940236a29e281fe15ecb1","modified":1545494331885},{"_id":"source/_drafts/2018년 회고.md","hash":"74f076bce91e38ea4848bf67604aaa6646e90748","modified":1545829805798},{"_id":"source/_posts/[meta] 개발자 어떻게 공부 해야 할까.md","hash":"3e82f564922c20dd73c2d17d6d984b79ed766bb5","modified":1545835931170},{"_id":"source/_posts/[meta] 새로운 개념 어떻게 습득해야 할까.md","hash":"1969e817b139682a04d4d55a78b9aa2988890f3a","modified":1545829914487},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기.md","hash":"c23e66cbea1b95ee6de64b4402c166d88cd781e6","modified":1544195319402},{"_id":"source/_posts/[spring]Spring AOP 적용시 주의사항.md","hash":"c1a58b685901c6f225871faaae54708b3b37b520","modified":1543937864126},{"_id":"source/about/index.md","hash":"d4cf7207ded88c694ff6f620f36ce1b9774f1eee","modified":1543851545838},{"_id":"source/archive/index.md","hash":"21806fd262da492f2634d224f5846ccee9cd3b45","modified":1543851545839},{"_id":"source/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1543851545898},{"_id":"source/tags/index.md","hash":"a4cdcade4001fdc71547462e0bd7feedee96038b","modified":1543851545918},{"_id":"themes/beantech/languages_to_be_added/de.yml","hash":"02a98ba2b93e30a00ae7979fbe90b767a27290f0","modified":1543851545921},{"_id":"themes/beantech/languages_to_be_added/default.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1543851545921},{"_id":"themes/beantech/languages_to_be_added/es.yml","hash":"fb089145368422ac47da9eb00fed05b15c904aa2","modified":1543851545922},{"_id":"themes/beantech/languages_to_be_added/en.yml","hash":"3cd0873b310cbf2fe022ee18d55a6113b347ea09","modified":1543851545922},{"_id":"themes/beantech/languages_to_be_added/no.yml","hash":"5ce3a1043ff85cecf83f3b5b0cdad2df44fa0192","modified":1543851545922},{"_id":"themes/beantech/languages_to_be_added/pl.yml","hash":"6dc5d1b2aa75ae4c527089a770f43bafb91d80f4","modified":1543851545923},{"_id":"themes/beantech/languages_to_be_added/ru.yml","hash":"2cfaf93704ea4ac3f374c69bab89ca31916faa33","modified":1543851545924},{"_id":"themes/beantech/languages_to_be_added/zh-CN.yml","hash":"6d712d9eb6ba12213dcd76b532cd86e9da83cfa3","modified":1543851545924},{"_id":"themes/beantech/languages_to_be_added/zh-TW.yml","hash":"45c84384a05fdb7e32a3e2d498ea180be7dccfa9","modified":1543851545925},{"_id":"themes/beantech/layout/404.ejs","hash":"c9b488d74c21fe9f35f642a5d19a138099ddf8a8","modified":1543851545925},{"_id":"themes/beantech/layout/about.ejs","hash":"96c08fc3580b842ad9d8f37f2cdf02e6fa57d7bc","modified":1543851545934},{"_id":"themes/beantech/layout/archive.ejs","hash":"62781e8b0ce4de9c3db6042fedeaf13c26d138f8","modified":1543851545934},{"_id":"themes/beantech/layout/keynote.ejs","hash":"e177b9e4a159f40b512f4ae1bfd928be4ab60840","modified":1543851545935},{"_id":"themes/beantech/layout/index.ejs","hash":"f293cefe4bf9f9c6848dff08b6dac4aeb7948892","modified":1543851545934},{"_id":"themes/beantech/layout/layout.ejs","hash":"389fc11a45676f94b77ebd2cb0d658a0358979c8","modified":1543851545936},{"_id":"themes/beantech/layout/page.ejs","hash":"f7fc5282ad55131aa67dcde03c9189faa450a7c9","modified":1543936437748},{"_id":"themes/beantech/layout/tags.ejs","hash":"63911a99e6daf9968bfdd7d69f0d3d697039902e","modified":1543851545937},{"_id":"themes/beantech/layout/post.ejs","hash":"2d69c68b7dee4642e32ad0a9334bc93e0d7647a7","modified":1543936310688},{"_id":"source/_drafts/2018년 회고/evernote.png","hash":"aadac0e1c3ef71c23040b54d6b1368c6aa6af00e","modified":1545448478639},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post_clustering.jpg","hash":"06449cdaf9d37e8e005b5cc817b3c07b564b5b09","modified":1544189956252},{"_id":"source/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1543851545840},{"_id":"themes/beantech/layout/_partial/footer.ejs","hash":"6739744e71fc211a9e7c05c71c42b240c1f5abf7","modified":1543851545926},{"_id":"themes/beantech/layout/_partial/head.ejs","hash":"d3d8e20181066f4592621bfa925a1c54ee3ab2c4","modified":1545563598771},{"_id":"themes/beantech/layout/_partial/header.ejs","hash":"9aea336d3907735eedabcfb21c286cd54a01f45f","modified":1543851545927},{"_id":"themes/beantech/layout/_partial/nav.ejs","hash":"e65bfec3d14a9eb9f1e09b592bb34023e6bf6e83","modified":1543851545928},{"_id":"themes/beantech/layout/_partial/pagination.ejs","hash":"cd61e4dbbf6020ad094c8e66ec06e8c38ebcd122","modified":1543851545928},{"_id":"themes/beantech/layout/_partial/sidebar.ejs","hash":"bc7834dd769eeac94a76ffd9cfbb13a622861b62","modified":1543851545929},{"_id":"themes/beantech/layout/_partial/toc.ejs","hash":"a765433a33b3613f4664de2da48d0c58f68f8cd6","modified":1543851545930},{"_id":"themes/beantech/layout/_widget/archive.ejs","hash":"ad9fb0073d40fe90bfe3a1e3246e0b07e12b3ecf","modified":1543851545930},{"_id":"themes/beantech/layout/_widget/category.ejs","hash":"c32e6fb8f3a07c5cbaffcebf93c357237c18b009","modified":1543851545931},{"_id":"themes/beantech/layout/_widget/featured-tags.ejs","hash":"e29431fa78c81d7c521bb1f7be356651fcde959c","modified":1543851545931},{"_id":"themes/beantech/layout/_widget/friends-blog.ejs","hash":"b185fcffb0d181ddd9eb2259af38cf7d82fb2846","modified":1543851545932},{"_id":"themes/beantech/layout/_widget/recent-posts.ejs","hash":"814dd716083a8a75eb31f9d2d6ab28150b01c533","modified":1543851545933},{"_id":"themes/beantech/layout/_widget/short-about.ejs","hash":"91288381dbd98f1c6b91d419094934ff59437021","modified":1543851545933},{"_id":"themes/beantech/source/css/beantech.css","hash":"5e9bee0a553da83a3efd4e9bc975a0ebd13b1b7d","modified":1545563589268},{"_id":"themes/beantech/source/css/archive.styl","hash":"7fbe61178ba54fd306d60bbbdf66aa2d19d9bcca","modified":1545557273501},{"_id":"themes/beantech/source/css/highlight.styl","hash":"831f8195f3577ba5bea374f2e24b90054d445055","modified":1545555608421},{"_id":"themes/beantech/source/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1543851545946},{"_id":"themes/beantech/source/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1543851545967},{"_id":"themes/beantech/source/css/rocket.styl","hash":"0abbccdbcd6cce70e8a0bab7152c38adc0b708f1","modified":1543851545971},{"_id":"themes/beantech/source/css/signature.styl","hash":"63ae8051f59d5e69544647cc4173eabc81d99aae","modified":1543851545972},{"_id":"themes/beantech/source/css/toc.styl","hash":"822aca17c885109452cc75a9aa384d9f3c07ea81","modified":1545557521676},{"_id":"themes/beantech/source/css/widget.styl","hash":"f996466e299c68274145ba5afaca9b6d1dd83114","modified":1543851545973},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1543851545974},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1543851545983},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1543851545984},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1543851545984},{"_id":"themes/beantech/source/js/bootstrap.min.js","hash":"313da686ebbe387064f2d1899c64ea562b81eb40","modified":1543851546004},{"_id":"themes/beantech/source/js/hux-blog.js","hash":"3d3c93e42a9990b2a2e6df5a08e9816f9a221e0f","modified":1543851546006},{"_id":"themes/beantech/source/js/hux-blog.min.js","hash":"ee99af17a1a69ac8d85a695fed0349ba202789ae","modified":1543851546008},{"_id":"themes/beantech/source/js/jquery.nav.js","hash":"bc6383fa2aa8f437978cf044a3b6f10a65114398","modified":1543851546067},{"_id":"themes/beantech/source/js/jquery.tagcloud.js","hash":"448017ff32f75f444ed7985d10a21b3ad92ab100","modified":1543851546069},{"_id":"themes/beantech/source/js/toc.js","hash":"4ffe95b7755b035ee1b41664fa72b0ebea29c3f8","modified":1543851546071},{"_id":"themes/beantech/source/js/totop.js","hash":"f796b09b4f6177c3674a8c1542a8c92e8590cb5c","modified":1543851546072},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-example.png","hash":"db0f9d614b5530bd52c51708fd2268ce2da18add","modified":1544192171498},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-test.png","hash":"20fdd03a1a409e8052894ef015be27b37ac4b252","modified":1544145748919},{"_id":"source/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1543851545851},{"_id":"source/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1543851545903},{"_id":"themes/beantech/source/css/bootstrap.min.css","hash":"1818a346630e7133a1f194669f613f613fcfa97c","modified":1543851545964},{"_id":"themes/beantech/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1543851545982},{"_id":"themes/beantech/source/js/bootstrap.js","hash":"5d69034fb6eded2e5961ea54dd47129a88cd5182","modified":1543851545996},{"_id":"themes/beantech/source/js/jquery.min.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1543851546064},{"_id":"source/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1543851545849},{"_id":"source/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1543851545917},{"_id":"themes/beantech/source/css/bootstrap.css","hash":"d1a24afac31222d70b4e001e0361ef045aa42043","modified":1543851545956},{"_id":"themes/beantech/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1543851545969},{"_id":"themes/beantech/source/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1543851545971},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-log.png","hash":"32214ac821da1cd2e573b6dcc3f95139792ee45d","modified":1544194063580},{"_id":"source/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1543851545895},{"_id":"source/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1543851545907},{"_id":"themes/beantech/source/js/jquery.js","hash":"4bb763dc96da604aed08ac024a1a3f5de73eea39","modified":1543851546045},{"_id":"themes/beantech/source/fonts/NANUMSQUAREROUNDB.TTF","hash":"e92331df4c26e67374cb41c18d4bdf326db8e53d","modified":1545557033808},{"_id":"source/img/header_img/bg_computer.jpg","hash":"6d40923b632e3aa0973d1ccbdb8f4a1f44883cea","modified":1544015583659},{"_id":"source/img/header_img/bg_computer.png","hash":"6d40923b632e3aa0973d1ccbdb8f4a1f44883cea","modified":1544015583659},{"_id":"source/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1543851545848},{"_id":"source/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1543851545884},{"_id":"source/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1543851545877},{"_id":"source/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1543851545869},{"_id":"source/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1543851545861},{"_id":"source/_drafts/2018년 회고/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545449141876},{"_id":"source/_posts/[meta] 개발자 어떻게 공부 해야 할까/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545829831749},{"_id":"source/_posts/[meta] 새로운 개념 어떻게 습득해야 할까/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1544541430182},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1544016575396},{"_id":"source/_posts/[spring]Spring AOP 적용시 주의사항/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1543938034451},{"_id":"public/feed.xml","hash":"1d374f16ab3a4b87a1e70a9d011e1c09e2ef18a8","modified":1545835943641},{"_id":"public/page-sitemap.xml","hash":"0c3e482ad942f098931e2314469591b1600d11b9","modified":1545835943674},{"_id":"public/post-sitemap.xml","hash":"d17020dbfffc915372e2a88f42fa9e4418c3f163","modified":1545835943745},{"_id":"public/tag-sitemap.xml","hash":"695e5876c938801fed56a69f45ec590ab60d3595","modified":1545835943810},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1545835943810},{"_id":"public/sitemap.xml","hash":"93b04dab197e59985f8cc8f14c0e58b29f09bff4","modified":1545835943848},{"_id":"public/robots.txt","hash":"7e49dfd97319f5dd7cdaea8518cf43e0e8d01e5a","modified":1545835943874},{"_id":"public/404.html","hash":"a38edab26ecefc699b0f02f38e96def42a932576","modified":1545835943876},{"_id":"public/tags/index.html","hash":"22e6e5b972a28054464d61e4ba645bc43d39673b","modified":1545835943901},{"_id":"public/2018/12/26/[meta] 개발자 어떻게 공부 해야 할까/index.html","hash":"537cdeecd51df112be0df3d9ed1cd229ce6ea846","modified":1545835943915},{"_id":"public/2018/12/12/[meta] 새로운 개념 어떻게 습득해야 할까/index.html","hash":"6d3025b79092c3b4408c58da699707e776fa9745","modified":1545835943915},{"_id":"public/2018/12/05/[quartz] 실시간 배치 동적 스케줄러 사용기/index.html","hash":"4f6cef407441a90436d20062753fd271f215477c","modified":1545835943947},{"_id":"public/2018/12/04/[spring]Spring AOP 적용시 주의사항/index.html","hash":"7c58b557450b55efcff7f9bef1d6e73a714c2d79","modified":1545835943957},{"_id":"public/about/index.html","hash":"d233f72a8ad60ca6e9323d5fb1bd730750f18a50","modified":1545835943957},{"_id":"public/archive/index.html","hash":"3967cf78989c0defecd45021c9700498b3b2e4b5","modified":1545835943958},{"_id":"public/archives/index.html","hash":"cdcfc84fefcb590d7685b8702f52ae99a3c9baf4","modified":1545835943959},{"_id":"public/archives/2018/index.html","hash":"1943787c6f812df81851f4a573e2138004fe589b","modified":1545835943959},{"_id":"public/archives/2018/12/index.html","hash":"b850fd2962462a6d2995b406d85acdf121bf08ab","modified":1545835943959},{"_id":"public/tags/메타/index.html","hash":"ec882c9b1a34b3fa2d5611b14bf3ce5107796718","modified":1545835943959},{"_id":"public/tags/개발일반/index.html","hash":"f6147eaa0dd413f49d1ffb78c08c7103b93a8a08","modified":1545835943963},{"_id":"public/tags/Framework/index.html","hash":"dfcd889230ebe9af05df615834bbc5c72d3cdb18","modified":1545835943963},{"_id":"public/index.html","hash":"164e8c83c1346542c8722452656cbf04957d4e57","modified":1545835943963},{"_id":"public/tags/Spring/index.html","hash":"9f3768d07a540aeb70e179cab3fcd05bdb341f73","modified":1545835943963},{"_id":"public/tags/Library/index.html","hash":"5a0bd409c4a3ff73a5d0ee666d48007b99dfed5d","modified":1545835943964},{"_id":"public/tags/Quartz/index.html","hash":"2ee2d840ae3933f4803639f694fbb514366f6ed2","modified":1545835943964},{"_id":"public/img/icon_wechat.png","hash":"4188058026609de06c6cac88b349a2da831a1783","modified":1545835943964},{"_id":"public/CNAME","hash":"55d5b0b4757a7d65ee4966dd161f394d06d257b7","modified":1545835943964},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1545835943964},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1545835943964},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1545835943964},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1545835943964},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1545835943964},{"_id":"public/css/images/rocket.png","hash":"6dee0406955aa9b7a261161d30f2538a671e806b","modified":1545835943964},{"_id":"public/2018/12/22/2018년 회고/evernote.png","hash":"aadac0e1c3ef71c23040b54d6b1368c6aa6af00e","modified":1545835943964},{"_id":"public/2018/12/05/[quartz] 실시간 배치 동적 스케줄러 사용기/post_clustering.jpg","hash":"06449cdaf9d37e8e005b5cc817b3c07b564b5b09","modified":1545835943964},{"_id":"public/img/header_img/Iron-Man-3.jpg","hash":"62a9a76854503c327990cc8d10de293ab6e9588f","modified":1545835944222},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1545835944224},{"_id":"public/2018/12/05/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-example.png","hash":"db0f9d614b5530bd52c51708fd2268ce2da18add","modified":1545835944225},{"_id":"public/2018/12/05/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-test.png","hash":"20fdd03a1a409e8052894ef015be27b37ac4b252","modified":1545835944225},{"_id":"public/css/archive.css","hash":"112f240646e0cbf8d593c4e23d7275452edad4e6","modified":1545835944237},{"_id":"public/css/highlight.css","hash":"03d1f0a648e9bdf7b1f57d217313cbac5d0c7eb1","modified":1545835944237},{"_id":"public/css/toc.css","hash":"2062bf4e5b219654e0d4bf470f5eef1be213da95","modified":1545835944237},{"_id":"public/css/signature.css","hash":"820fa4743cea34a61808cd8f7de528605c32d7e3","modified":1545835944237},{"_id":"public/css/rocket.css","hash":"9456fd92f729e09d6de8cda70f95d78e0d789c70","modified":1545835944237},{"_id":"public/css/widget.css","hash":"da95ad3f1938f24d20f1fa77d7a38f0c392b5ec8","modified":1545835944238},{"_id":"public/js/hux-blog.min.js","hash":"1563e7f70550ac6b30803d6f449719b853200e35","modified":1545835944238},{"_id":"public/js/jquery.nav.js","hash":"ef2160a456176a4d09cc0b95d52b27dfbbadf2d8","modified":1545835944238},{"_id":"public/js/hux-blog.js","hash":"4b4d3c557405d04c3087d36c13e2834fe05c0f73","modified":1545835944238},{"_id":"public/js/jquery.tagcloud.js","hash":"4e5fd0b07f3bd935f2e603710447e039e3677211","modified":1545835944238},{"_id":"public/js/toc.js","hash":"41e52551731854224c249d53010c1bae5aa92ffa","modified":1545835944238},{"_id":"public/js/totop.js","hash":"c05360f6fc699ac12e794b1764b4a952713a3017","modified":1545835944238},{"_id":"public/css/beantech.css","hash":"4c361354fd8e9851923fb21a620bc079380ebcd8","modified":1545835944238},{"_id":"public/css/beantech.min.css","hash":"05a06230b1a9eca0b30cece54a397008cb77dc50","modified":1545835944238},{"_id":"public/css/hux-blog.min.css","hash":"1baef04de262aeb7023d835429b49a805ac4ab40","modified":1545835944238},{"_id":"public/js/bootstrap.min.js","hash":"b3f2ef9f985e7906c9360756b73cd64bf7733647","modified":1545835944238},{"_id":"public/js/bootstrap.js","hash":"f8752e9ae24daec0a0baffd7819122f8c6fd9103","modified":1545835944238},{"_id":"public/js/jquery.min.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545835944238},{"_id":"public/css/bootstrap.min.css","hash":"fec7b176a4b9a67c0eb5d184f57b84297efc23aa","modified":1545835944238},{"_id":"public/css/bootstrap.css","hash":"41c54bf695145ae0b4d9020a1da308ceb05dcaf3","modified":1545835944238},{"_id":"public/js/jquery.js","hash":"1852661bd11a09ca9b9cb63d1aa6ff390fffaf4e","modified":1545835944238},{"_id":"public/img/404-bg.jpg","hash":"68f7d525269a94287e0ad18713ae232fb59dcf71","modified":1545835944238},{"_id":"public/img/signature/BeanTechSign-white.png","hash":"34289ed41cf9ddac2d56be46fbb1515b7d5913cd","modified":1545835944238},{"_id":"public/img/ironman-draw.png","hash":"7d6a06b4b544ab146c3b3e8474edc33f14ac6e4d","modified":1545835944242},{"_id":"public/img/signature/BeanTechSign-black.png","hash":"94b7102e819fd6ee082d3fb0166f4de7458c22ff","modified":1545835944242},{"_id":"public/img/header_img/tf-logo-dark.png","hash":"5c7bf8ade9de134f8c77a3c59e575abe9fc6cdd4","modified":1545835944242},{"_id":"public/2018/12/05/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-log.png","hash":"32214ac821da1cd2e573b6dcc3f95139792ee45d","modified":1545835944243},{"_id":"public/img/contact-bg.jpg","hash":"6af63305c923899017e727b5ca968a2703bc08cf","modified":1545835944246},{"_id":"public/fonts/NANUMSQUAREROUNDB.TTF","hash":"e92331df4c26e67374cb41c18d4bdf326db8e53d","modified":1545835944331},{"_id":"public/img/header_img/bg_computer.png","hash":"6d40923b632e3aa0973d1ccbdb8f4a1f44883cea","modified":1545835944335},{"_id":"public/img/header_img/bg_computer.jpg","hash":"6d40923b632e3aa0973d1ccbdb8f4a1f44883cea","modified":1545835944335},{"_id":"public/img/header_img/tag-bg.png","hash":"e83cd7b04ff85bcbc9bd3ebf5e57a55166e82568","modified":1545835944345},{"_id":"public/img/beantech-desktop.png","hash":"4a8f8b209c9db8fd5209f15b8e4590525e258b0f","modified":1545835944346},{"_id":"public/img/header_img/home-bg-o.png","hash":"134ece4cb4c49c7ca1403a5afe7f46d0e2f9ecbb","modified":1545835944352},{"_id":"public/img/header_img/home-bg-2-dark.png","hash":"da6a3d5ca787bdc25e69655abd879b4f821aeb30","modified":1545835944357},{"_id":"public/img/header_img/archive-bg.png","hash":"6bf9c224543ec54e250309db89cbdf46e0c4b5ba","modified":1545835944360},{"_id":"public/2018/12/12/[meta] 새로운 개념 어떻게 습득해야 할까/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545835944398},{"_id":"public/2018/12/04/[spring]Spring AOP 적용시 주의사항/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545835944398},{"_id":"public/2018/12/26/[meta] 개발자 어떻게 공부 해야 할까/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545835944399},{"_id":"public/2018/12/22/2018년 회고/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545835944401},{"_id":"public/2018/12/05/[quartz] 실시간 배치 동적 스케줄러 사용기/bg_computer.jpg","hash":"c1262e32424df886818ea55062c81ce89851c2cd","modified":1545835944404}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2018-12-03T15:39:05.788Z","updated":"2018-12-03T15:39:05.788Z","path":"404.html","title":"","comments":1,"_id":"cjq5at3ea0000lwota5qcalyd","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"tags","title":"Tags","description":"Hey, this is Tags.","header-img":"img/header_img/tag-bg.png","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\ndescription: \"Hey, this is Tags.\"\nheader-img: \"img/header_img/tag-bg.png\"\n---\n","date":"2018-12-03T15:39:05.918Z","updated":"2018-12-03T15:39:05.918Z","path":"tags/index.html","comments":1,"_id":"cjq5at3fq0002lwot466kjcxk","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2016-04-20T19:48:33.000Z","description":"Wish for the Best, Prepare for the Worst","header-img":"img/header_img/Iron-Man-3.jpg","comments":1,"_content":"\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2016-04-21 04:48:33\ndescription: \"Wish for the Best, Prepare for the Worst\"\nheader-img: \"img/header_img/Iron-Man-3.jpg\"\ncomments: true\n---\n\n> 光有好奇心而不去實踐，等於自願放棄成功機會\n> 別為自己畫地自限，Just Do It！！\n","updated":"2018-12-03T15:39:05.838Z","path":"about/index.html","_id":"cjq5at3fs0004lwoto61epur3","content":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>光有好奇心而不去實踐，等於自願放棄成功機會<br>\n別為自己畫地自限，Just Do It！！</p>\n</blockquote>\n"},{"layout":"archive","title":"Archives","header-img":"img/header_img/archive-bg.png","comments":0,"date":"2017-03-20T11:49:56.000Z","description":"Hey, this is archives","_content":"","source":"archive/index.md","raw":"---\nlayout: \"archive\"\ntitle: \"Archives\"\nheader-img: \"img/header_img/archive-bg.png\"\ncomments: false\ndate: 2017-03-20 20:49:56\ndescription: \"Hey, this is archives\"\n---\n","updated":"2018-12-03T15:39:05.839Z","path":"archive/index.html","_id":"cjq5at3fu0006lwotxcmv265w","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"개발자 2018년 회고","catalog":true,"subtitle":null,"header-img":null,"_content":"\n\n# 습관 만들기\n\n\n## 독서\n올해 가장 잘한 일 중에 하나가 독서하는 습관을 만들었다는 것이다.\n왜냐하면 다양한 분야에 책을 읽는 과정에서 공감, 까닳음, 반성, 동기부여, 삶의 계획 등 많은 것을 느끼게 해주었고 그것들은 내가 인생을 어떻게 살아야 겠다라는\n가이드? 역활을 해주어서 삶을 계획하고 주체적으로 살아 갈 수 있게 해주었기 때문이다.\n\n집근처 도서관이 있는것을 보고 한번 가볼까? 하고 아내랑 도서관을 들어가봤다.\n충격이었다. 남녀노소 공부하는 열기가 장난 아니었기 때문이었다. 더불어 수많은 책들의 제목만 봐도 그동안 내가 궁금해었던 주제들 보고 싶었던 책이 많다는것과 \n더 놀라운것은 내가 정말 지적 호기심이 많은 사람이었다는것을 깨닳은 것이었다. \n\n그 날부터 평균 1주에 1권씩 책을 읽어 나갔고 주로 프로그래밍 관련 된 책이었지만 그 외 인문, 과학, 자기개발 책들도 읽었다.\n\n### 1년 70권 \n1년 100권이 목표였지만 올해는 70권을 읽었다기 보다 70권 정도 대출한것이다. 책을 볼때 0부터 100까지 끝까지 읽을때도 있고 아닐때도 있기 때문에 70권을 다 읽은 것은 아니다.\n하지만 30년 살면서 올해가 가장 많이 책을 읽었고 그만큼 독서의 중요성을 알게된 중요한 해이기도 했다.\n\n### 하지만 독서 노트는....\n독서를 하고나서 얻은 지식을 써먹거나 실천하기 위해서는 메모를 하던가 장기기억으로 만들어야 한다.\n독서 노트를 통해 내가 그당시 얻은 영감, 생각, 느낀점, 앞으로 계획 등을 적음으로써 내용을 반복하고 실천하고 장기기억으로 이루어져 생각이 바뀌고 실천 할 수 있다.\n\n하지만 책을 많이 읽은 만큼 적은 독서노트는 5개정도 밖에 되지 않는다.. 얻은 지식을 체화시키지 않으면 밑빠지 독에 물붓기 밖에 되지 않으니 내년에는 독서 노트 반드시 적도록 하자\n\n### 프로그래밍 책\n사실 프로그래밍 관련 된 책을 많이 읽었지만 그리 큰 도움은 되지 않은것 같다. 관련 내용은 인터넷에 얻을 수 있는 정보들이 많았고(물론 단편적인 지식을 말한다.), 책을 보면서 프로그래밍 하는건\n머릿속에 잘 들어오지도 않기 때문이다. (머릿속에 들어오게 하려면 책을 보면서 프로그래밍 하는게 아니라 내가 만들고 싶은 기능이 있는데 이책 참고해보면 되겠다 이느낌으로 책을 봐야 함)\n그럼에도 불구하고 나는 프로그래밍 책은 앞으로도 계속 볼 것이다. 이유는 아래와 같다.\n\n- S/W 분야에서 저명한 저자가 쓴 책이 있고 각 노하우를 얻을 수 있기 때문이다. (단순 인터넷에서 검색해서 나오는 단편적인 지식이 아님)\n- 새로운 개념을 접할 때 관련 책을 보면 주제가 잘 정리되어 있어 가이드데로 하기 편함\n- 독서하는 행위 자체가 얻을게 많음(논리력, 이해력 등)\n\n### 그래서 내년에는?\n- 책을 더럽게 보자, 당시 나의 생각과 느낀점을 바로 옆에 적자 (빌리것이라면 post-it!)\n- 그날 읽은 내용은 그날 독서노트를 적고 안되면 주말에 반드시!\n\n\n## 나의 계획 실천 프레임워크\n독서를 하면서 내가 이루고 싶은 것들을 이루기 위해서 체계적인 계획이 있어야 동기부여도 되면서 내가 무엇을 해야 하는지 딱 정해놔야 내가 실천 잘 할 수 있다는 것을 깨닳게 되어 고민해서 만든 나의 실천 프레임워크를 만들어 보았다. \n\n### Evernote\n{% asset_img \"evernote.png\" %}  \n\n제일 먼저 사용했던 앱으로 계획에 대한 진행 상황을 한눈에 볼 수 없다는 단점이 있어서 Notion 갈아타게 되었다.\n\n### Notion\n메모앱 끝판왕이라고 할 수 있다.\n자유롭게 내가 하고 싶은 포맷을 바꿀수 있어 편리하다.\n\n\n# 개발 \n\n## 매일 알고리즘 문제 풀기\n논리력, 문제해결 능력을 키우기 위해 시작한 것으로 약 10일 정도는 열심히 했던거 같다... 능력을 키우기 위해서 내년에는 꾸준히 하도록 하자.\n\n## 패스트캠퍼스 컴퓨터 공학 인강\nOS에 대한 개념은 확실히 많이 알게 되었다.  \n내년에는 컴퓨터 구조, 리눅스, C/C++, Phython 까지 모두 완강하고 정리까지 마쳐야 겠다.\n\n## TIL\n하루를 정말 쌓아가는 느낌을 들게 해주는 역활이었던거 같다.  \n비록 2달째 정도 거의 빠지지 않고 잘 유지하고 있는데 내년에도 계속 이어나가 내가 알게 된 지식을 잘 정리하고 장기기억으로 이어질수 있도록 하자\n\n\n\n# 토이프로젝트 \n- 일단 제대로 완성 시킨것은 없다..\n- 개발범위를 너무 넓게 잡고 개발기간도 너무 오래 잡아 타이트 하지 않아 집중려고 떨어 졌다.\n- 내년에는 2주짜리, 3개월짜리 개발기간을 딱 정하고 평소 해보고 싶었던 기술을 써보아서 나의 개발 무기를 추가해보자\n\n\n# 반성\n\n## 하루에 할 수 있는 것만!\n하고싶은것은 많아 무리하게 계획하여 하루에 다 못이루는 경우가 많았다...  \n욕심이 많아 얼른 머릿속에 지식을 넣고 싶지만 지식을 내것으로 만드는 과정은 그렇게 빨리 이루어지지 않는다느것 이해와 반복이 계속 수반되어야 체화 되는 것을 다시 한번 알게 되었다.  \n내가 하루에 얼마나 투자 할 수 있을지 시간을 계산해보고 그 범위내에서 계획하고 꾸준히 이루어 나가자\n\n\n# 2018년 마무리\n참 많이 시도도 해보고 성장도 많이 한 한해인거 같다.  \n책도 많이 읽었고 계획한것을 잘 실천하기 위해 메모앱을 활용하면서 시도도 많이 해보고 지금은 시행착오에 대한 결과로 나만의 실천 프레임워크가 잘 정착된거 같다.  \n육아 하면서 짬짬히 시간내기가 정말 힘들었지만 그것또한 이제 익숙해져서 시간도 잘 활용하고 있다.  \n내년 2019년도에는 지금보다 훨씬 더 큰 폭으로 성장 할 것이라는 확신이 든다.  \n이제 나의 실천 프레임워크 기반 위에서 해야 할 플랜을 잘 실천하자 내년에는 참 많이 달라진 내모습을 기대하면서 기록은 마무리 하겠다.\n\n\n# 내년에는?\n- 프로그래머 필수 역량 논리력, 문제해결능력 이 본질적인 능력을 키우는 것을 최우선으로 한다.\n- 영어 듣고, 말하고, 쓰고, 읽고가 되는 실력을 만들자, 영어 레퍼런스 문서, 책, 유트브영상 보는데 부담이 없을 정도로 만든다.\n- 웹에서 류윤광이라는 개발자를 알리고 개발자들 사이에 편리한 서비스 및 아이디어를 구상하여 개발자들에게 편리함을 줘보자 \n- 구상한 토이프로젝트는 반드시 기간 맞춰서 완성도 있게 완성 시킨다.","source":"_drafts/2018년 회고.md","raw":"---\ntitle: 개발자 2018년 회고\ncatalog: true\nsubtitle:\nheader-img:\ntags:\n---\n\n\n# 습관 만들기\n\n\n## 독서\n올해 가장 잘한 일 중에 하나가 독서하는 습관을 만들었다는 것이다.\n왜냐하면 다양한 분야에 책을 읽는 과정에서 공감, 까닳음, 반성, 동기부여, 삶의 계획 등 많은 것을 느끼게 해주었고 그것들은 내가 인생을 어떻게 살아야 겠다라는\n가이드? 역활을 해주어서 삶을 계획하고 주체적으로 살아 갈 수 있게 해주었기 때문이다.\n\n집근처 도서관이 있는것을 보고 한번 가볼까? 하고 아내랑 도서관을 들어가봤다.\n충격이었다. 남녀노소 공부하는 열기가 장난 아니었기 때문이었다. 더불어 수많은 책들의 제목만 봐도 그동안 내가 궁금해었던 주제들 보고 싶었던 책이 많다는것과 \n더 놀라운것은 내가 정말 지적 호기심이 많은 사람이었다는것을 깨닳은 것이었다. \n\n그 날부터 평균 1주에 1권씩 책을 읽어 나갔고 주로 프로그래밍 관련 된 책이었지만 그 외 인문, 과학, 자기개발 책들도 읽었다.\n\n### 1년 70권 \n1년 100권이 목표였지만 올해는 70권을 읽었다기 보다 70권 정도 대출한것이다. 책을 볼때 0부터 100까지 끝까지 읽을때도 있고 아닐때도 있기 때문에 70권을 다 읽은 것은 아니다.\n하지만 30년 살면서 올해가 가장 많이 책을 읽었고 그만큼 독서의 중요성을 알게된 중요한 해이기도 했다.\n\n### 하지만 독서 노트는....\n독서를 하고나서 얻은 지식을 써먹거나 실천하기 위해서는 메모를 하던가 장기기억으로 만들어야 한다.\n독서 노트를 통해 내가 그당시 얻은 영감, 생각, 느낀점, 앞으로 계획 등을 적음으로써 내용을 반복하고 실천하고 장기기억으로 이루어져 생각이 바뀌고 실천 할 수 있다.\n\n하지만 책을 많이 읽은 만큼 적은 독서노트는 5개정도 밖에 되지 않는다.. 얻은 지식을 체화시키지 않으면 밑빠지 독에 물붓기 밖에 되지 않으니 내년에는 독서 노트 반드시 적도록 하자\n\n### 프로그래밍 책\n사실 프로그래밍 관련 된 책을 많이 읽었지만 그리 큰 도움은 되지 않은것 같다. 관련 내용은 인터넷에 얻을 수 있는 정보들이 많았고(물론 단편적인 지식을 말한다.), 책을 보면서 프로그래밍 하는건\n머릿속에 잘 들어오지도 않기 때문이다. (머릿속에 들어오게 하려면 책을 보면서 프로그래밍 하는게 아니라 내가 만들고 싶은 기능이 있는데 이책 참고해보면 되겠다 이느낌으로 책을 봐야 함)\n그럼에도 불구하고 나는 프로그래밍 책은 앞으로도 계속 볼 것이다. 이유는 아래와 같다.\n\n- S/W 분야에서 저명한 저자가 쓴 책이 있고 각 노하우를 얻을 수 있기 때문이다. (단순 인터넷에서 검색해서 나오는 단편적인 지식이 아님)\n- 새로운 개념을 접할 때 관련 책을 보면 주제가 잘 정리되어 있어 가이드데로 하기 편함\n- 독서하는 행위 자체가 얻을게 많음(논리력, 이해력 등)\n\n### 그래서 내년에는?\n- 책을 더럽게 보자, 당시 나의 생각과 느낀점을 바로 옆에 적자 (빌리것이라면 post-it!)\n- 그날 읽은 내용은 그날 독서노트를 적고 안되면 주말에 반드시!\n\n\n## 나의 계획 실천 프레임워크\n독서를 하면서 내가 이루고 싶은 것들을 이루기 위해서 체계적인 계획이 있어야 동기부여도 되면서 내가 무엇을 해야 하는지 딱 정해놔야 내가 실천 잘 할 수 있다는 것을 깨닳게 되어 고민해서 만든 나의 실천 프레임워크를 만들어 보았다. \n\n### Evernote\n{% asset_img \"evernote.png\" %}  \n\n제일 먼저 사용했던 앱으로 계획에 대한 진행 상황을 한눈에 볼 수 없다는 단점이 있어서 Notion 갈아타게 되었다.\n\n### Notion\n메모앱 끝판왕이라고 할 수 있다.\n자유롭게 내가 하고 싶은 포맷을 바꿀수 있어 편리하다.\n\n\n# 개발 \n\n## 매일 알고리즘 문제 풀기\n논리력, 문제해결 능력을 키우기 위해 시작한 것으로 약 10일 정도는 열심히 했던거 같다... 능력을 키우기 위해서 내년에는 꾸준히 하도록 하자.\n\n## 패스트캠퍼스 컴퓨터 공학 인강\nOS에 대한 개념은 확실히 많이 알게 되었다.  \n내년에는 컴퓨터 구조, 리눅스, C/C++, Phython 까지 모두 완강하고 정리까지 마쳐야 겠다.\n\n## TIL\n하루를 정말 쌓아가는 느낌을 들게 해주는 역활이었던거 같다.  \n비록 2달째 정도 거의 빠지지 않고 잘 유지하고 있는데 내년에도 계속 이어나가 내가 알게 된 지식을 잘 정리하고 장기기억으로 이어질수 있도록 하자\n\n\n\n# 토이프로젝트 \n- 일단 제대로 완성 시킨것은 없다..\n- 개발범위를 너무 넓게 잡고 개발기간도 너무 오래 잡아 타이트 하지 않아 집중려고 떨어 졌다.\n- 내년에는 2주짜리, 3개월짜리 개발기간을 딱 정하고 평소 해보고 싶었던 기술을 써보아서 나의 개발 무기를 추가해보자\n\n\n# 반성\n\n## 하루에 할 수 있는 것만!\n하고싶은것은 많아 무리하게 계획하여 하루에 다 못이루는 경우가 많았다...  \n욕심이 많아 얼른 머릿속에 지식을 넣고 싶지만 지식을 내것으로 만드는 과정은 그렇게 빨리 이루어지지 않는다느것 이해와 반복이 계속 수반되어야 체화 되는 것을 다시 한번 알게 되었다.  \n내가 하루에 얼마나 투자 할 수 있을지 시간을 계산해보고 그 범위내에서 계획하고 꾸준히 이루어 나가자\n\n\n# 2018년 마무리\n참 많이 시도도 해보고 성장도 많이 한 한해인거 같다.  \n책도 많이 읽었고 계획한것을 잘 실천하기 위해 메모앱을 활용하면서 시도도 많이 해보고 지금은 시행착오에 대한 결과로 나만의 실천 프레임워크가 잘 정착된거 같다.  \n육아 하면서 짬짬히 시간내기가 정말 힘들었지만 그것또한 이제 익숙해져서 시간도 잘 활용하고 있다.  \n내년 2019년도에는 지금보다 훨씬 더 큰 폭으로 성장 할 것이라는 확신이 든다.  \n이제 나의 실천 프레임워크 기반 위에서 해야 할 플랜을 잘 실천하자 내년에는 참 많이 달라진 내모습을 기대하면서 기록은 마무리 하겠다.\n\n\n# 내년에는?\n- 프로그래머 필수 역량 논리력, 문제해결능력 이 본질적인 능력을 키우는 것을 최우선으로 한다.\n- 영어 듣고, 말하고, 쓰고, 읽고가 되는 실력을 만들자, 영어 레퍼런스 문서, 책, 유트브영상 보는데 부담이 없을 정도로 만든다.\n- 웹에서 류윤광이라는 개발자를 알리고 개발자들 사이에 편리한 서비스 및 아이디어를 구상하여 개발자들에게 편리함을 줘보자 \n- 구상한 토이프로젝트는 반드시 기간 맞춰서 완성도 있게 완성 시킨다.","slug":"2018년 회고","published":0,"date":"2018-12-22T02:20:29.028Z","updated":"2018-12-26T13:10:05.798Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq5at3fn0001lwot1pgb6fpe","content":"<h1><span id=\"습관-만들기\">습관 만들기</span></h1>\n<h2><span id=\"독서\">독서</span></h2>\n<p>올해 가장 잘한 일 중에 하나가 독서하는 습관을 만들었다는 것이다.<br>\n왜냐하면 다양한 분야에 책을 읽는 과정에서 공감, 까닳음, 반성, 동기부여, 삶의 계획 등 많은 것을 느끼게 해주었고 그것들은 내가 인생을 어떻게 살아야 겠다라는<br>\n가이드? 역활을 해주어서 삶을 계획하고 주체적으로 살아 갈 수 있게 해주었기 때문이다.</p>\n<p>집근처 도서관이 있는것을 보고 한번 가볼까? 하고 아내랑 도서관을 들어가봤다.<br>\n충격이었다. 남녀노소 공부하는 열기가 장난 아니었기 때문이었다. 더불어 수많은 책들의 제목만 봐도 그동안 내가 궁금해었던 주제들 보고 싶었던 책이 많다는것과<br>\n더 놀라운것은 내가 정말 지적 호기심이 많은 사람이었다는것을 깨닳은 것이었다.</p>\n<p>그 날부터 평균 1주에 1권씩 책을 읽어 나갔고 주로 프로그래밍 관련 된 책이었지만 그 외 인문, 과학, 자기개발 책들도 읽었다.</p>\n<h3><span id=\"1년-70권\">1년 70권</span></h3>\n<p>1년 100권이 목표였지만 올해는 70권을 읽었다기 보다 70권 정도 대출한것이다. 책을 볼때 0부터 100까지 끝까지 읽을때도 있고 아닐때도 있기 때문에 70권을 다 읽은 것은 아니다.<br>\n하지만 30년 살면서 올해가 가장 많이 책을 읽었고 그만큼 독서의 중요성을 알게된 중요한 해이기도 했다.</p>\n<h3><span id=\"하지만-독서-노트는\">하지만 독서 노트는…</span></h3>\n<p>독서를 하고나서 얻은 지식을 써먹거나 실천하기 위해서는 메모를 하던가 장기기억으로 만들어야 한다.<br>\n독서 노트를 통해 내가 그당시 얻은 영감, 생각, 느낀점, 앞으로 계획 등을 적음으로써 내용을 반복하고 실천하고 장기기억으로 이루어져 생각이 바뀌고 실천 할 수 있다.</p>\n<p>하지만 책을 많이 읽은 만큼 적은 독서노트는 5개정도 밖에 되지 않는다… 얻은 지식을 체화시키지 않으면 밑빠지 독에 물붓기 밖에 되지 않으니 내년에는 독서 노트 반드시 적도록 하자</p>\n<h3><span id=\"프로그래밍-책\">프로그래밍 책</span></h3>\n<p>사실 프로그래밍 관련 된 책을 많이 읽었지만 그리 큰 도움은 되지 않은것 같다. 관련 내용은 인터넷에 얻을 수 있는 정보들이 많았고(물론 단편적인 지식을 말한다.), 책을 보면서 프로그래밍 하는건<br>\n머릿속에 잘 들어오지도 않기 때문이다. (머릿속에 들어오게 하려면 책을 보면서 프로그래밍 하는게 아니라 내가 만들고 싶은 기능이 있는데 이책 참고해보면 되겠다 이느낌으로 책을 봐야 함)<br>\n그럼에도 불구하고 나는 프로그래밍 책은 앞으로도 계속 볼 것이다. 이유는 아래와 같다.</p>\n<ul>\n<li>S/W 분야에서 저명한 저자가 쓴 책이 있고 각 노하우를 얻을 수 있기 때문이다. (단순 인터넷에서 검색해서 나오는 단편적인 지식이 아님)</li>\n<li>새로운 개념을 접할 때 관련 책을 보면 주제가 잘 정리되어 있어 가이드데로 하기 편함</li>\n<li>독서하는 행위 자체가 얻을게 많음(논리력, 이해력 등)</li>\n</ul>\n<h3><span id=\"그래서-내년에는\">그래서 내년에는?</span></h3>\n<ul>\n<li>책을 더럽게 보자, 당시 나의 생각과 느낀점을 바로 옆에 적자 (빌리것이라면 post-it!)</li>\n<li>그날 읽은 내용은 그날 독서노트를 적고 안되면 주말에 반드시!</li>\n</ul>\n<h2><span id=\"나의-계획-실천-프레임워크\">나의 계획 실천 프레임워크</span></h2>\n<p>독서를 하면서 내가 이루고 싶은 것들을 이루기 위해서 체계적인 계획이 있어야 동기부여도 되면서 내가 무엇을 해야 하는지 딱 정해놔야 내가 실천 잘 할 수 있다는 것을 깨닳게 되어 고민해서 만든 나의 실천 프레임워크를 만들어 보았다.</p>\n<h3><span id=\"evernote\">Evernote</span></h3>\n<img src=\"/2018/12/22/2018년%20회고/evernote.png\">  \n<p>제일 먼저 사용했던 앱으로 계획에 대한 진행 상황을 한눈에 볼 수 없다는 단점이 있어서 Notion 갈아타게 되었다.</p>\n<h3><span id=\"notion\">Notion</span></h3>\n<p>메모앱 끝판왕이라고 할 수 있다.<br>\n자유롭게 내가 하고 싶은 포맷을 바꿀수 있어 편리하다.</p>\n<h1><span id=\"개발\">개발</span></h1>\n<h2><span id=\"매일-알고리즘-문제-풀기\">매일 알고리즘 문제 풀기</span></h2>\n<p>논리력, 문제해결 능력을 키우기 위해 시작한 것으로 약 10일 정도는 열심히 했던거 같다… 능력을 키우기 위해서 내년에는 꾸준히 하도록 하자.</p>\n<h2><span id=\"패스트캠퍼스-컴퓨터-공학-인강\">패스트캠퍼스 컴퓨터 공학 인강</span></h2>\n<p>OS에 대한 개념은 확실히 많이 알게 되었다.<br>\n내년에는 컴퓨터 구조, 리눅스, C/C++, Phython 까지 모두 완강하고 정리까지 마쳐야 겠다.</p>\n<h2><span id=\"til\">TIL</span></h2>\n<p>하루를 정말 쌓아가는 느낌을 들게 해주는 역활이었던거 같다.<br>\n비록 2달째 정도 거의 빠지지 않고 잘 유지하고 있는데 내년에도 계속 이어나가 내가 알게 된 지식을 잘 정리하고 장기기억으로 이어질수 있도록 하자</p>\n<h1><span id=\"토이프로젝트\">토이프로젝트</span></h1>\n<ul>\n<li>일단 제대로 완성 시킨것은 없다…</li>\n<li>개발범위를 너무 넓게 잡고 개발기간도 너무 오래 잡아 타이트 하지 않아 집중려고 떨어 졌다.</li>\n<li>내년에는 2주짜리, 3개월짜리 개발기간을 딱 정하고 평소 해보고 싶었던 기술을 써보아서 나의 개발 무기를 추가해보자</li>\n</ul>\n<h1><span id=\"반성\">반성</span></h1>\n<h2><span id=\"하루에-할-수-있는-것만\">하루에 할 수 있는 것만!</span></h2>\n<p>하고싶은것은 많아 무리하게 계획하여 하루에 다 못이루는 경우가 많았다…<br>\n욕심이 많아 얼른 머릿속에 지식을 넣고 싶지만 지식을 내것으로 만드는 과정은 그렇게 빨리 이루어지지 않는다느것 이해와 반복이 계속 수반되어야 체화 되는 것을 다시 한번 알게 되었다.<br>\n내가 하루에 얼마나 투자 할 수 있을지 시간을 계산해보고 그 범위내에서 계획하고 꾸준히 이루어 나가자</p>\n<h1><span id=\"2018년-마무리\">2018년 마무리</span></h1>\n<p>참 많이 시도도 해보고 성장도 많이 한 한해인거 같다.<br>\n책도 많이 읽었고 계획한것을 잘 실천하기 위해 메모앱을 활용하면서 시도도 많이 해보고 지금은 시행착오에 대한 결과로 나만의 실천 프레임워크가 잘 정착된거 같다.<br>\n육아 하면서 짬짬히 시간내기가 정말 힘들었지만 그것또한 이제 익숙해져서 시간도 잘 활용하고 있다.<br>\n내년 2019년도에는 지금보다 훨씬 더 큰 폭으로 성장 할 것이라는 확신이 든다.<br>\n이제 나의 실천 프레임워크 기반 위에서 해야 할 플랜을 잘 실천하자 내년에는 참 많이 달라진 내모습을 기대하면서 기록은 마무리 하겠다.</p>\n<h1><span id=\"내년에는\">내년에는?</span></h1>\n<ul>\n<li>프로그래머 필수 역량 논리력, 문제해결능력 이 본질적인 능력을 키우는 것을 최우선으로 한다.</li>\n<li>영어 듣고, 말하고, 쓰고, 읽고가 되는 실력을 만들자, 영어 레퍼런스 문서, 책, 유트브영상 보는데 부담이 없을 정도로 만든다.</li>\n<li>웹에서 류윤광이라는 개발자를 알리고 개발자들 사이에 편리한 서비스 및 아이디어를 구상하여 개발자들에게 편리함을 줘보자</li>\n<li>구상한 토이프로젝트는 반드시 기간 맞춰서 완성도 있게 완성 시킨다.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>습관 만들기</h1>\n<h2>독서</h2>\n<p>올해 가장 잘한 일 중에 하나가 독서하는 습관을 만들었다는 것이다.<br>\n왜냐하면 다양한 분야에 책을 읽는 과정에서 공감, 까닳음, 반성, 동기부여, 삶의 계획 등 많은 것을 느끼게 해주었고 그것들은 내가 인생을 어떻게 살아야 겠다라는<br>\n가이드? 역활을 해주어서 삶을 계획하고 주체적으로 살아 갈 수 있게 해주었기 때문이다.</p>\n<p>집근처 도서관이 있는것을 보고 한번 가볼까? 하고 아내랑 도서관을 들어가봤다.<br>\n충격이었다. 남녀노소 공부하는 열기가 장난 아니었기 때문이었다. 더불어 수많은 책들의 제목만 봐도 그동안 내가 궁금해었던 주제들 보고 싶었던 책이 많다는것과<br>\n더 놀라운것은 내가 정말 지적 호기심이 많은 사람이었다는것을 깨닳은 것이었다.</p>\n<p>그 날부터 평균 1주에 1권씩 책을 읽어 나갔고 주로 프로그래밍 관련 된 책이었지만 그 외 인문, 과학, 자기개발 책들도 읽었다.</p>\n<h3>1년 70권</h3>\n<p>1년 100권이 목표였지만 올해는 70권을 읽었다기 보다 70권 정도 대출한것이다. 책을 볼때 0부터 100까지 끝까지 읽을때도 있고 아닐때도 있기 때문에 70권을 다 읽은 것은 아니다.<br>\n하지만 30년 살면서 올해가 가장 많이 책을 읽었고 그만큼 독서의 중요성을 알게된 중요한 해이기도 했다.</p>\n<h3>하지만 독서 노트는…</h3>\n<p>독서를 하고나서 얻은 지식을 써먹거나 실천하기 위해서는 메모를 하던가 장기기억으로 만들어야 한다.<br>\n독서 노트를 통해 내가 그당시 얻은 영감, 생각, 느낀점, 앞으로 계획 등을 적음으로써 내용을 반복하고 실천하고 장기기억으로 이루어져 생각이 바뀌고 실천 할 수 있다.</p>\n<p>하지만 책을 많이 읽은 만큼 적은 독서노트는 5개정도 밖에 되지 않는다… 얻은 지식을 체화시키지 않으면 밑빠지 독에 물붓기 밖에 되지 않으니 내년에는 독서 노트 반드시 적도록 하자</p>\n<h3>프로그래밍 책</h3>\n<p>사실 프로그래밍 관련 된 책을 많이 읽었지만 그리 큰 도움은 되지 않은것 같다. 관련 내용은 인터넷에 얻을 수 있는 정보들이 많았고(물론 단편적인 지식을 말한다.), 책을 보면서 프로그래밍 하는건<br>\n머릿속에 잘 들어오지도 않기 때문이다. (머릿속에 들어오게 하려면 책을 보면서 프로그래밍 하는게 아니라 내가 만들고 싶은 기능이 있는데 이책 참고해보면 되겠다 이느낌으로 책을 봐야 함)<br>\n그럼에도 불구하고 나는 프로그래밍 책은 앞으로도 계속 볼 것이다. 이유는 아래와 같다.</p>\n<ul>\n<li>S/W 분야에서 저명한 저자가 쓴 책이 있고 각 노하우를 얻을 수 있기 때문이다. (단순 인터넷에서 검색해서 나오는 단편적인 지식이 아님)</li>\n<li>새로운 개념을 접할 때 관련 책을 보면 주제가 잘 정리되어 있어 가이드데로 하기 편함</li>\n<li>독서하는 행위 자체가 얻을게 많음(논리력, 이해력 등)</li>\n</ul>\n<h3>그래서 내년에는?</h3>\n<ul>\n<li>책을 더럽게 보자, 당시 나의 생각과 느낀점을 바로 옆에 적자 (빌리것이라면 post-it!)</li>\n<li>그날 읽은 내용은 그날 독서노트를 적고 안되면 주말에 반드시!</li>\n</ul>\n<h2>나의 계획 실천 프레임워크</h2>\n<p>독서를 하면서 내가 이루고 싶은 것들을 이루기 위해서 체계적인 계획이 있어야 동기부여도 되면서 내가 무엇을 해야 하는지 딱 정해놔야 내가 실천 잘 할 수 있다는 것을 깨닳게 되어 고민해서 만든 나의 실천 프레임워크를 만들어 보았다.</p>\n<h3>Evernote</h3>\n<img src=\"/2018/12/22/2018년%20회고/evernote.png\">  \n<p>제일 먼저 사용했던 앱으로 계획에 대한 진행 상황을 한눈에 볼 수 없다는 단점이 있어서 Notion 갈아타게 되었다.</p>\n<h3>Notion</h3>\n<p>메모앱 끝판왕이라고 할 수 있다.<br>\n자유롭게 내가 하고 싶은 포맷을 바꿀수 있어 편리하다.</p>\n<h1>개발</h1>\n<h2>매일 알고리즘 문제 풀기</h2>\n<p>논리력, 문제해결 능력을 키우기 위해 시작한 것으로 약 10일 정도는 열심히 했던거 같다… 능력을 키우기 위해서 내년에는 꾸준히 하도록 하자.</p>\n<h2>패스트캠퍼스 컴퓨터 공학 인강</h2>\n<p>OS에 대한 개념은 확실히 많이 알게 되었다.<br>\n내년에는 컴퓨터 구조, 리눅스, C/C++, Phython 까지 모두 완강하고 정리까지 마쳐야 겠다.</p>\n<h2>TIL</h2>\n<p>하루를 정말 쌓아가는 느낌을 들게 해주는 역활이었던거 같다.<br>\n비록 2달째 정도 거의 빠지지 않고 잘 유지하고 있는데 내년에도 계속 이어나가 내가 알게 된 지식을 잘 정리하고 장기기억으로 이어질수 있도록 하자</p>\n<h1>토이프로젝트</h1>\n<ul>\n<li>일단 제대로 완성 시킨것은 없다…</li>\n<li>개발범위를 너무 넓게 잡고 개발기간도 너무 오래 잡아 타이트 하지 않아 집중려고 떨어 졌다.</li>\n<li>내년에는 2주짜리, 3개월짜리 개발기간을 딱 정하고 평소 해보고 싶었던 기술을 써보아서 나의 개발 무기를 추가해보자</li>\n</ul>\n<h1>반성</h1>\n<h2>하루에 할 수 있는 것만!</h2>\n<p>하고싶은것은 많아 무리하게 계획하여 하루에 다 못이루는 경우가 많았다…<br>\n욕심이 많아 얼른 머릿속에 지식을 넣고 싶지만 지식을 내것으로 만드는 과정은 그렇게 빨리 이루어지지 않는다느것 이해와 반복이 계속 수반되어야 체화 되는 것을 다시 한번 알게 되었다.<br>\n내가 하루에 얼마나 투자 할 수 있을지 시간을 계산해보고 그 범위내에서 계획하고 꾸준히 이루어 나가자</p>\n<h1>2018년 마무리</h1>\n<p>참 많이 시도도 해보고 성장도 많이 한 한해인거 같다.<br>\n책도 많이 읽었고 계획한것을 잘 실천하기 위해 메모앱을 활용하면서 시도도 많이 해보고 지금은 시행착오에 대한 결과로 나만의 실천 프레임워크가 잘 정착된거 같다.<br>\n육아 하면서 짬짬히 시간내기가 정말 힘들었지만 그것또한 이제 익숙해져서 시간도 잘 활용하고 있다.<br>\n내년 2019년도에는 지금보다 훨씬 더 큰 폭으로 성장 할 것이라는 확신이 든다.<br>\n이제 나의 실천 프레임워크 기반 위에서 해야 할 플랜을 잘 실천하자 내년에는 참 많이 달라진 내모습을 기대하면서 기록은 마무리 하겠다.</p>\n<h1>내년에는?</h1>\n<ul>\n<li>프로그래머 필수 역량 논리력, 문제해결능력 이 본질적인 능력을 키우는 것을 최우선으로 한다.</li>\n<li>영어 듣고, 말하고, 쓰고, 읽고가 되는 실력을 만들자, 영어 레퍼런스 문서, 책, 유트브영상 보는데 부담이 없을 정도로 만든다.</li>\n<li>웹에서 류윤광이라는 개발자를 알리고 개발자들 사이에 편리한 서비스 및 아이디어를 구상하여 개발자들에게 편리함을 줘보자</li>\n<li>구상한 토이프로젝트는 반드시 기간 맞춰서 완성도 있게 완성 시킨다.</li>\n</ul>\n"},{"title":"새로운 개념 어떻게 습득해야 할까","catalog":true,"date":"2018-12-11T15:18:21.000Z","subtitle":null,"header-img":"bg_computer.jpg","catagories":["메타"],"_content":"\n# 새로운 개념 습득 어떻게?\n\n소프트웨어 개발자로 살고 있는 나는 홍수같이 터져 나오는 많은 기술들에 대해서 다 알아둬야 할 것 같아서 허덕거렸다.  \n이 많은 것을 언제 다 배우지? 그것은 중압감과 압박감으로 스트레스로 이루어 졌고\n일하면서 알게된 지식들 정리하기도 벅찬데 육아하면서 새로운 개념은 언제 습득 할까..\n\n하지만 다른 개발들에 생각들을 웹에서 접하면서 새로운 기술을 배우는 것에 초점을 맞추는게 아니라\n새로운 기술들을 잘 배울려면 나는 어떻게 해야 할까?? 라는 좀 더 근본적인 다시 말해 메타 생각을 가지게 되었다.\n\n다 배울 필요없고 미리 배울 필요도 없다. 그냥 써야 되는 상황이 오면 그때 습득하여 적용하면 되는 것이다.\n\n어짜피 미리 배워봤자 머릿속에 장기기억으로 잘 이루어지지 않는다.  \n왜냐하면 설사 습득하였다 하더라도 습득한 기술이\n정말 절실하고 필요해서 사용한 것이 아니기 때문에 잘 와닿지도 않아 뇌 신경망을 그리 자극시키지 않기 때문이다.\n\n평소에 쓰는 기술들로 다시 머릿속을 채울뿐이다.\n\n한마디로 밑빠진독에 물붓기...\n\n그럼 다시 돌아와서 내가 중요하게 생각하는것은 새로운 개념을 어떻게 해야 빠르고 정확하게 잘 습득하여 적용/응용 할 수 있을까? 라는 대답이다.\n\n시간 날때마다 생각해본 나의 생각과 참고한 사이트 기반으로 정리한 방법은 아래와 같다. [원문](https://goo.gl/XNsHZv) / [번역](https://goo.gl/di0BnJ)\n\n\n# 그래서 어떻게 하라고?\n\n## Step1 튜토리얼 데로 따라해보자\n\n### 익숙해지는게 목표\n\n- 처음 접한 것이기 때문에 이해라는 그림에 퍼즐조각을 많이 확보해야 함\n- 퍼즐조각이 많을수록 이해도가 증가함\n- 모르는것이 천지이기 때문에 모른다고 시간 잡아 먹으면 끝도 없음 일단 끝까지 완주 하는게 목표\n\n## Step2 튜토리얼 따라하면서 몰랐던 내용 조사\n- Step1 에서 궁금증을 푸는 단계\n- 삽질은 반드시 필요하며 머릿속에 넣는 고통에 대가이자 필수 재료이다.\n- 책, 인터넷 서치, 커뮤니티, 지인 질문 등 다양한 방법으로 모르는 것을 해결하자\n\n## Step3 내가 만들고 싶은것을 만들어보자\n\n- 새로운 것을 습득하려는 이유가 반드시 있을것이다.\n- 그 이유가 무엇인가??\n- 그 이유를 바탕으로 내가 만들고 싶은걸 만들어야 동기가 생기고 재밋게 개발할 수 있다.\n\n## Step4 방출하기\n- 머릿속에 든 내용을 꺼내야 장기기억으로 이어짐\n- 그 수단은 포스팅, 누군가에게 이해시키기 등이 있다.\n\n# 의식적 연습\n\nnode.js 기반 스케줄 모듈 만들어 보자","source":"_posts/[meta] 새로운 개념 어떻게 습득해야 할까.md","raw":"---\ntitle: 새로운 개념 어떻게 습득해야 할까\ncatalog: true\ndate: 2018-12-12 00:18:21\nsubtitle:\nheader-img: \"bg_computer.jpg\"\ntags:\n- 메타\ncatagories:\n- 메타\n---\n\n# 새로운 개념 습득 어떻게?\n\n소프트웨어 개발자로 살고 있는 나는 홍수같이 터져 나오는 많은 기술들에 대해서 다 알아둬야 할 것 같아서 허덕거렸다.  \n이 많은 것을 언제 다 배우지? 그것은 중압감과 압박감으로 스트레스로 이루어 졌고\n일하면서 알게된 지식들 정리하기도 벅찬데 육아하면서 새로운 개념은 언제 습득 할까..\n\n하지만 다른 개발들에 생각들을 웹에서 접하면서 새로운 기술을 배우는 것에 초점을 맞추는게 아니라\n새로운 기술들을 잘 배울려면 나는 어떻게 해야 할까?? 라는 좀 더 근본적인 다시 말해 메타 생각을 가지게 되었다.\n\n다 배울 필요없고 미리 배울 필요도 없다. 그냥 써야 되는 상황이 오면 그때 습득하여 적용하면 되는 것이다.\n\n어짜피 미리 배워봤자 머릿속에 장기기억으로 잘 이루어지지 않는다.  \n왜냐하면 설사 습득하였다 하더라도 습득한 기술이\n정말 절실하고 필요해서 사용한 것이 아니기 때문에 잘 와닿지도 않아 뇌 신경망을 그리 자극시키지 않기 때문이다.\n\n평소에 쓰는 기술들로 다시 머릿속을 채울뿐이다.\n\n한마디로 밑빠진독에 물붓기...\n\n그럼 다시 돌아와서 내가 중요하게 생각하는것은 새로운 개념을 어떻게 해야 빠르고 정확하게 잘 습득하여 적용/응용 할 수 있을까? 라는 대답이다.\n\n시간 날때마다 생각해본 나의 생각과 참고한 사이트 기반으로 정리한 방법은 아래와 같다. [원문](https://goo.gl/XNsHZv) / [번역](https://goo.gl/di0BnJ)\n\n\n# 그래서 어떻게 하라고?\n\n## Step1 튜토리얼 데로 따라해보자\n\n### 익숙해지는게 목표\n\n- 처음 접한 것이기 때문에 이해라는 그림에 퍼즐조각을 많이 확보해야 함\n- 퍼즐조각이 많을수록 이해도가 증가함\n- 모르는것이 천지이기 때문에 모른다고 시간 잡아 먹으면 끝도 없음 일단 끝까지 완주 하는게 목표\n\n## Step2 튜토리얼 따라하면서 몰랐던 내용 조사\n- Step1 에서 궁금증을 푸는 단계\n- 삽질은 반드시 필요하며 머릿속에 넣는 고통에 대가이자 필수 재료이다.\n- 책, 인터넷 서치, 커뮤니티, 지인 질문 등 다양한 방법으로 모르는 것을 해결하자\n\n## Step3 내가 만들고 싶은것을 만들어보자\n\n- 새로운 것을 습득하려는 이유가 반드시 있을것이다.\n- 그 이유가 무엇인가??\n- 그 이유를 바탕으로 내가 만들고 싶은걸 만들어야 동기가 생기고 재밋게 개발할 수 있다.\n\n## Step4 방출하기\n- 머릿속에 든 내용을 꺼내야 장기기억으로 이어짐\n- 그 수단은 포스팅, 누군가에게 이해시키기 등이 있다.\n\n# 의식적 연습\n\nnode.js 기반 스케줄 모듈 만들어 보자","slug":"[meta] 새로운 개념 어떻게 습득해야 할까","published":1,"updated":"2018-12-26T13:11:54.487Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq5at3fr0003lwot7rkf1938","content":"<h1><span id=\"새로운-개념-습득-어떻게\">새로운 개념 습득 어떻게?</span></h1>\n<p>소프트웨어 개발자로 살고 있는 나는 홍수같이 터져 나오는 많은 기술들에 대해서 다 알아둬야 할 것 같아서 허덕거렸다.<br>\n이 많은 것을 언제 다 배우지? 그것은 중압감과 압박감으로 스트레스로 이루어 졌고<br>\n일하면서 알게된 지식들 정리하기도 벅찬데 육아하면서 새로운 개념은 언제 습득 할까…</p>\n<p>하지만 다른 개발들에 생각들을 웹에서 접하면서 새로운 기술을 배우는 것에 초점을 맞추는게 아니라<br>\n새로운 기술들을 잘 배울려면 나는 어떻게 해야 할까?? 라는 좀 더 근본적인 다시 말해 메타 생각을 가지게 되었다.</p>\n<p>다 배울 필요없고 미리 배울 필요도 없다. 그냥 써야 되는 상황이 오면 그때 습득하여 적용하면 되는 것이다.</p>\n<p>어짜피 미리 배워봤자 머릿속에 장기기억으로 잘 이루어지지 않는다.<br>\n왜냐하면 설사 습득하였다 하더라도 습득한 기술이<br>\n정말 절실하고 필요해서 사용한 것이 아니기 때문에 잘 와닿지도 않아 뇌 신경망을 그리 자극시키지 않기 때문이다.</p>\n<p>평소에 쓰는 기술들로 다시 머릿속을 채울뿐이다.</p>\n<p>한마디로 밑빠진독에 물붓기…</p>\n<p>그럼 다시 돌아와서 내가 중요하게 생각하는것은 새로운 개념을 어떻게 해야 빠르고 정확하게 잘 습득하여 적용/응용 할 수 있을까? 라는 대답이다.</p>\n<p>시간 날때마다 생각해본 나의 생각과 참고한 사이트 기반으로 정리한 방법은 아래와 같다. <a href=\"https://goo.gl/XNsHZv\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">원문</a> / <a href=\"https://goo.gl/di0BnJ\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">번역</a></p>\n<h1><span id=\"그래서-어떻게-하라고\">그래서 어떻게 하라고?</span></h1>\n<h2><span id=\"step1-튜토리얼-데로-따라해보자\">Step1 튜토리얼 데로 따라해보자</span></h2>\n<h3><span id=\"익숙해지는게-목표\">익숙해지는게 목표</span></h3>\n<ul>\n<li>처음 접한 것이기 때문에 이해라는 그림에 퍼즐조각을 많이 확보해야 함</li>\n<li>퍼즐조각이 많을수록 이해도가 증가함</li>\n<li>모르는것이 천지이기 때문에 모른다고 시간 잡아 먹으면 끝도 없음 일단 끝까지 완주 하는게 목표</li>\n</ul>\n<h2><span id=\"step2-튜토리얼-따라하면서-몰랐던-내용-조사\">Step2 튜토리얼 따라하면서 몰랐던 내용 조사</span></h2>\n<ul>\n<li>Step1 에서 궁금증을 푸는 단계</li>\n<li>삽질은 반드시 필요하며 머릿속에 넣는 고통에 대가이자 필수 재료이다.</li>\n<li>책, 인터넷 서치, 커뮤니티, 지인 질문 등 다양한 방법으로 모르는 것을 해결하자</li>\n</ul>\n<h2><span id=\"step3-내가-만들고-싶은것을-만들어보자\">Step3 내가 만들고 싶은것을 만들어보자</span></h2>\n<ul>\n<li>새로운 것을 습득하려는 이유가 반드시 있을것이다.</li>\n<li>그 이유가 무엇인가??</li>\n<li>그 이유를 바탕으로 내가 만들고 싶은걸 만들어야 동기가 생기고 재밋게 개발할 수 있다.</li>\n</ul>\n<h2><span id=\"step4-방출하기\">Step4 방출하기</span></h2>\n<ul>\n<li>머릿속에 든 내용을 꺼내야 장기기억으로 이어짐</li>\n<li>그 수단은 포스팅, 누군가에게 이해시키기 등이 있다.</li>\n</ul>\n<h1><span id=\"의식적-연습\">의식적 연습</span></h1>\n<p>node.js 기반 스케줄 모듈 만들어 보자</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>새로운 개념 습득 어떻게?</h1>\n<p>소프트웨어 개발자로 살고 있는 나는 홍수같이 터져 나오는 많은 기술들에 대해서 다 알아둬야 할 것 같아서 허덕거렸다.<br>\n이 많은 것을 언제 다 배우지? 그것은 중압감과 압박감으로 스트레스로 이루어 졌고<br>\n일하면서 알게된 지식들 정리하기도 벅찬데 육아하면서 새로운 개념은 언제 습득 할까…</p>\n<p>하지만 다른 개발들에 생각들을 웹에서 접하면서 새로운 기술을 배우는 것에 초점을 맞추는게 아니라<br>\n새로운 기술들을 잘 배울려면 나는 어떻게 해야 할까?? 라는 좀 더 근본적인 다시 말해 메타 생각을 가지게 되었다.</p>\n<p>다 배울 필요없고 미리 배울 필요도 없다. 그냥 써야 되는 상황이 오면 그때 습득하여 적용하면 되는 것이다.</p>\n<p>어짜피 미리 배워봤자 머릿속에 장기기억으로 잘 이루어지지 않는다.<br>\n왜냐하면 설사 습득하였다 하더라도 습득한 기술이<br>\n정말 절실하고 필요해서 사용한 것이 아니기 때문에 잘 와닿지도 않아 뇌 신경망을 그리 자극시키지 않기 때문이다.</p>\n<p>평소에 쓰는 기술들로 다시 머릿속을 채울뿐이다.</p>\n<p>한마디로 밑빠진독에 물붓기…</p>\n<p>그럼 다시 돌아와서 내가 중요하게 생각하는것은 새로운 개념을 어떻게 해야 빠르고 정확하게 잘 습득하여 적용/응용 할 수 있을까? 라는 대답이다.</p>\n<p>시간 날때마다 생각해본 나의 생각과 참고한 사이트 기반으로 정리한 방법은 아래와 같다. <a href=\"https://goo.gl/XNsHZv\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">원문</a> / <a href=\"https://goo.gl/di0BnJ\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">번역</a></p>\n<h1>그래서 어떻게 하라고?</h1>\n<h2>Step1 튜토리얼 데로 따라해보자</h2>\n<h3>익숙해지는게 목표</h3>\n<ul>\n<li>처음 접한 것이기 때문에 이해라는 그림에 퍼즐조각을 많이 확보해야 함</li>\n<li>퍼즐조각이 많을수록 이해도가 증가함</li>\n<li>모르는것이 천지이기 때문에 모른다고 시간 잡아 먹으면 끝도 없음 일단 끝까지 완주 하는게 목표</li>\n</ul>\n<h2>Step2 튜토리얼 따라하면서 몰랐던 내용 조사</h2>\n<ul>\n<li>Step1 에서 궁금증을 푸는 단계</li>\n<li>삽질은 반드시 필요하며 머릿속에 넣는 고통에 대가이자 필수 재료이다.</li>\n<li>책, 인터넷 서치, 커뮤니티, 지인 질문 등 다양한 방법으로 모르는 것을 해결하자</li>\n</ul>\n<h2>Step3 내가 만들고 싶은것을 만들어보자</h2>\n<ul>\n<li>새로운 것을 습득하려는 이유가 반드시 있을것이다.</li>\n<li>그 이유가 무엇인가??</li>\n<li>그 이유를 바탕으로 내가 만들고 싶은걸 만들어야 동기가 생기고 재밋게 개발할 수 있다.</li>\n</ul>\n<h2>Step4 방출하기</h2>\n<ul>\n<li>머릿속에 든 내용을 꺼내야 장기기억으로 이어짐</li>\n<li>그 수단은 포스팅, 누군가에게 이해시키기 등이 있다.</li>\n</ul>\n<h1>의식적 연습</h1>\n<p>node.js 기반 스케줄 모듈 만들어 보자</p>\n"},{"title":"개발자 어떻게 공부 해야 할까","catalog":true,"date":"2018-12-26T14:41:21.000Z","subtitle":"선배 개발자님들에 조언 정리와 나의 생각","header-img":"bg_computer.jpg","catagories":["개발일반"],"_content":"\n# 작성 동기\n개발자 어떻게 공부 해야 할까? 그 대답을 찾기위해 고민하고 스스롭 방법을 정립을 머릿속으로만 하였다.  \n**\"개발자 공부\"** 에 대한 선배 개발자님들에 영감을 얻고 내 나름데로 생각을 정리하고 방법을 정립하기 위해 작성해 본다.\n\n# 먼저 영감을준 선배 개발자님들에 조언 정리\n\n## 개발자의 평생 공부 | 임백준 \n----\n[보러가기](https://goo.gl/26K1HE)\n\n\n## 개발자는 어떻게 성장해야 할까? | 강대명 \n----\n[보러가기](https://goo.gl/4fcv6r)\n\n### 내가 흥미 있는 주제 위주로 블로그 하기\n\n### 나의 토이 프로젝트 공개하기\n\n### 팀에서 사용하지 않는 기술이라면 그럼 나혼자 사용해 봄으로써 기술을 습득하면 된다.\n\n### 실력\n#### 지금 얼마나 알고 있는지\n#### 얼마나 빨리 배우는지\n#### 지속적으로 학습하는지\n\n### 실력보다 중요한것은?\n\n#### 커뮤니케이션\n- 함께 일하고 싶은 동료인가?\n- 정보 공유를 잘하고 나의 생산성을 향상시켜줄 수 있는 사람\n- 나중에 우리팀에 함께 일하고자 추천 할 수 있는 사람\n\n위 질문에 Yes! 라고 주변에서 말할수 있는 상태라면 성실하고 잘하는 개발자이며 나아가 사람들과 잘 소통하고 끌어당기는 힘 개발 그이상에 힘이 있다고 생각한다.\n\n\n\n## 오픈소스 개발자 이야기 20170701_오픈소스 개발자의 공부방법(강대명) \n----\n[보러가기](https://goo.gl/7C17Tw)\n\n### 절대적인 노력과 시간은 필요함\n\n### 기반지식  \n강대명 개발자님은 새로운 것을 접할 때 쉬운책을 3~4권 정도 본다든지 어떤 기술을 습득할 때 이 기술이 왜 탄생했는지에 대한 탄생,역사 등을 접한다고 했다.  \n이것은 기반지식을 쌓는 행위라고 생각한다. 예전 부터 나도 기반지식에 대한 의미를 생각 했었는데 누군가의 이야기가 이해 되지 않는 경우는 2가지라고 했다.  \n\n- 내용자체가 어려운 경우\n- 기반 지식(컨텍스트)이 부족한 경우\n\n바로 2번째 경우에서 기반 지식은 곧 이해와 직결되는 사항이라 생각한다.\n이해라는 전체적인 그림을 그리기 위해서 각 기반 지식들이 퍼즐 조각과도 같은 것이다.  \n따라서 새로운 개념을 습득할 때 기반지식이 없는 상태라면 아래와 같은 행위로 기반지식을 많이 쌓아두면 점점 익숙해져서 더 많이 깨닿고 습득 할 수 있을 거라 생각한다.\n\n- 쉬운 개념부터 0부터 100까지 빠르게 습득한다. (예) 기본 서적, 동영상, 블로그 활용)\n- 탄생, 역사에 대한 히스토리를 보며 탄생의도를 파악한다.\n- 제일 중요한건 내가 배우고 싶어하는 호기심과 관심이다.\n- 그 관심을 가지고 토이프로젝트를 하면 최고다.\n- 그 과정에서 알게되고 적용했을때 즐거움이 좋은 선순환을 만들 것이다.\n\n\n### 공부 방법에 중요성\n> 추가적인 지식습득 없이 특정 방법으로 14%의 수학 성적 향상  \n올바른 방법만 바꿔도 Input 되는 지식없이도 실력이 향상된다는 것이고 이는 프로그래밍에도 적용된다고 한다.  \n나 또한 같은 생각이며 항상 올바른 방법을 추가하며 공부해야 한다고 생각한다.\n\n\n### 의식적인 연습\n\n#### 스타크래프트 럴커 피하기 연습\n프로게이머는 럴커 피하기 연습을 할 때 촉수가 delay 되는 시간 촉수를 피하기 위해 마우스 포인터 위치를 파악하여 끊임없는 반복 연습을 하여 럴커를 피하게 된다.\n\n> 의식적 연습이란 럴커를 피하기 위한 의식적 생각에 답으로 delay 시간과 마우스 포인트 위치를 파악하여 집중 노력을 했다는 것이다.  \n프로그래머가 어떠한 새로운 개념,기술,지식을 습득하기 위해선 내가 얻고자 하는 그 무언가를 전략적이고 의식적인 생각을 통해 끊임없이 노력, 제대로 된 노력, 정확 노력을 집중해서 하는 것이라고 생각한다.\n\n관련된 내용에 추천 책 \n- [아웃라이어](https://goo.gl/DB6dKW)\n- [1만 시간의 재발견](https://goo.gl/AbmyPJ)\n\n\n### 피드백\n반드시 필요한 단계이다.  \n투입한 나의 코스트가 낭비되지 않으려면 최대한 빨리 피드백을 받아 나의 상태를 진단하여 무엇이 잘못된지를 파악하여 계획을 다시 잡을 수 있다.\n\n> 제가 아는 모분은 아는 사람 볼때마다 코드 리뷰 부탁합니다.\n\n정말 개발을 잘하고 싶어하는 의지가 보이는 개발자인거 같다.  \n나도 위와 같은 행동이 정말 필요하다 생각하는데 실천은 잘 안되는거 같다.  \n정말 빨리 배우고 습득하고 싶다면 반드시 필요한 행동이라 생각한다.\n\n피드백 받는 방법은\n\n- 잘하는 선배 개발자에게 질문, 리뷰 요청\n- 웹상에서 질문\n- 오픈소스 개발 활동\n\n\n### 교정\n피드백을 통해 알게 된 내용을 바탕으로 실제 고쳐서 적용하는 것\n\n\n### 그리고 다시 의식적인 연습\n고쳐진 방법으로 다시 의식적인 연습\n\n\n\n## 그래서 나는 어떻게??\n----\n\n### 의식적연습 -> 피드백 -> 교정 -> 의시적연습 반복 \n각 단계에 대한 충실하게 지속적인 실천을 한다.\n\n\n\n","source":"_posts/[meta] 개발자 어떻게 공부 해야 할까.md","raw":"---\ntitle: 개발자 어떻게 공부 해야 할까\ncatalog: true\ndate: 2018-12-26 23:41:21\nsubtitle: 선배 개발자님들에 조언 정리와 나의 생각\nheader-img: \"bg_computer.jpg\"\ntags:\n- 개발일반\n- 메타\ncatagories:\n- 개발일반\n---\n\n# 작성 동기\n개발자 어떻게 공부 해야 할까? 그 대답을 찾기위해 고민하고 스스롭 방법을 정립을 머릿속으로만 하였다.  \n**\"개발자 공부\"** 에 대한 선배 개발자님들에 영감을 얻고 내 나름데로 생각을 정리하고 방법을 정립하기 위해 작성해 본다.\n\n# 먼저 영감을준 선배 개발자님들에 조언 정리\n\n## 개발자의 평생 공부 | 임백준 \n----\n[보러가기](https://goo.gl/26K1HE)\n\n\n## 개발자는 어떻게 성장해야 할까? | 강대명 \n----\n[보러가기](https://goo.gl/4fcv6r)\n\n### 내가 흥미 있는 주제 위주로 블로그 하기\n\n### 나의 토이 프로젝트 공개하기\n\n### 팀에서 사용하지 않는 기술이라면 그럼 나혼자 사용해 봄으로써 기술을 습득하면 된다.\n\n### 실력\n#### 지금 얼마나 알고 있는지\n#### 얼마나 빨리 배우는지\n#### 지속적으로 학습하는지\n\n### 실력보다 중요한것은?\n\n#### 커뮤니케이션\n- 함께 일하고 싶은 동료인가?\n- 정보 공유를 잘하고 나의 생산성을 향상시켜줄 수 있는 사람\n- 나중에 우리팀에 함께 일하고자 추천 할 수 있는 사람\n\n위 질문에 Yes! 라고 주변에서 말할수 있는 상태라면 성실하고 잘하는 개발자이며 나아가 사람들과 잘 소통하고 끌어당기는 힘 개발 그이상에 힘이 있다고 생각한다.\n\n\n\n## 오픈소스 개발자 이야기 20170701_오픈소스 개발자의 공부방법(강대명) \n----\n[보러가기](https://goo.gl/7C17Tw)\n\n### 절대적인 노력과 시간은 필요함\n\n### 기반지식  \n강대명 개발자님은 새로운 것을 접할 때 쉬운책을 3~4권 정도 본다든지 어떤 기술을 습득할 때 이 기술이 왜 탄생했는지에 대한 탄생,역사 등을 접한다고 했다.  \n이것은 기반지식을 쌓는 행위라고 생각한다. 예전 부터 나도 기반지식에 대한 의미를 생각 했었는데 누군가의 이야기가 이해 되지 않는 경우는 2가지라고 했다.  \n\n- 내용자체가 어려운 경우\n- 기반 지식(컨텍스트)이 부족한 경우\n\n바로 2번째 경우에서 기반 지식은 곧 이해와 직결되는 사항이라 생각한다.\n이해라는 전체적인 그림을 그리기 위해서 각 기반 지식들이 퍼즐 조각과도 같은 것이다.  \n따라서 새로운 개념을 습득할 때 기반지식이 없는 상태라면 아래와 같은 행위로 기반지식을 많이 쌓아두면 점점 익숙해져서 더 많이 깨닿고 습득 할 수 있을 거라 생각한다.\n\n- 쉬운 개념부터 0부터 100까지 빠르게 습득한다. (예) 기본 서적, 동영상, 블로그 활용)\n- 탄생, 역사에 대한 히스토리를 보며 탄생의도를 파악한다.\n- 제일 중요한건 내가 배우고 싶어하는 호기심과 관심이다.\n- 그 관심을 가지고 토이프로젝트를 하면 최고다.\n- 그 과정에서 알게되고 적용했을때 즐거움이 좋은 선순환을 만들 것이다.\n\n\n### 공부 방법에 중요성\n> 추가적인 지식습득 없이 특정 방법으로 14%의 수학 성적 향상  \n올바른 방법만 바꿔도 Input 되는 지식없이도 실력이 향상된다는 것이고 이는 프로그래밍에도 적용된다고 한다.  \n나 또한 같은 생각이며 항상 올바른 방법을 추가하며 공부해야 한다고 생각한다.\n\n\n### 의식적인 연습\n\n#### 스타크래프트 럴커 피하기 연습\n프로게이머는 럴커 피하기 연습을 할 때 촉수가 delay 되는 시간 촉수를 피하기 위해 마우스 포인터 위치를 파악하여 끊임없는 반복 연습을 하여 럴커를 피하게 된다.\n\n> 의식적 연습이란 럴커를 피하기 위한 의식적 생각에 답으로 delay 시간과 마우스 포인트 위치를 파악하여 집중 노력을 했다는 것이다.  \n프로그래머가 어떠한 새로운 개념,기술,지식을 습득하기 위해선 내가 얻고자 하는 그 무언가를 전략적이고 의식적인 생각을 통해 끊임없이 노력, 제대로 된 노력, 정확 노력을 집중해서 하는 것이라고 생각한다.\n\n관련된 내용에 추천 책 \n- [아웃라이어](https://goo.gl/DB6dKW)\n- [1만 시간의 재발견](https://goo.gl/AbmyPJ)\n\n\n### 피드백\n반드시 필요한 단계이다.  \n투입한 나의 코스트가 낭비되지 않으려면 최대한 빨리 피드백을 받아 나의 상태를 진단하여 무엇이 잘못된지를 파악하여 계획을 다시 잡을 수 있다.\n\n> 제가 아는 모분은 아는 사람 볼때마다 코드 리뷰 부탁합니다.\n\n정말 개발을 잘하고 싶어하는 의지가 보이는 개발자인거 같다.  \n나도 위와 같은 행동이 정말 필요하다 생각하는데 실천은 잘 안되는거 같다.  \n정말 빨리 배우고 습득하고 싶다면 반드시 필요한 행동이라 생각한다.\n\n피드백 받는 방법은\n\n- 잘하는 선배 개발자에게 질문, 리뷰 요청\n- 웹상에서 질문\n- 오픈소스 개발 활동\n\n\n### 교정\n피드백을 통해 알게 된 내용을 바탕으로 실제 고쳐서 적용하는 것\n\n\n### 그리고 다시 의식적인 연습\n고쳐진 방법으로 다시 의식적인 연습\n\n\n\n## 그래서 나는 어떻게??\n----\n\n### 의식적연습 -> 피드백 -> 교정 -> 의시적연습 반복 \n각 단계에 대한 충실하게 지속적인 실천을 한다.\n\n\n\n","slug":"[meta] 개발자 어떻게 공부 해야 할까","published":1,"updated":"2018-12-26T14:52:11.170Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq5at3ft0005lwot73436mic","content":"<h1><span id=\"작성-동기\">작성 동기</span></h1>\n<p>개발자 어떻게 공부 해야 할까? 그 대답을 찾기위해 고민하고 스스롭 방법을 정립을 머릿속으로만 하였다.<br>\n<strong>“개발자 공부”</strong> 에 대한 선배 개발자님들에 영감을 얻고 내 나름데로 생각을 정리하고 방법을 정립하기 위해 작성해 본다.</p>\n<h1><span id=\"먼저-영감을준-선배-개발자님들에-조언-정리\">먼저 영감을준 선배 개발자님들에 조언 정리</span></h1>\n<h2><span id=\"개발자의-평생-공부-임백준\">개발자의 평생 공부 | 임백준</span></h2>\n<hr>\n<p><a href=\"https://goo.gl/26K1HE\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">보러가기</a></p>\n<h2><span id=\"개발자는-어떻게-성장해야-할까-강대명\">개발자는 어떻게 성장해야 할까? | 강대명</span></h2>\n<hr>\n<p><a href=\"https://goo.gl/4fcv6r\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">보러가기</a></p>\n<h3><span id=\"내가-흥미-있는-주제-위주로-블로그-하기\">내가 흥미 있는 주제 위주로 블로그 하기</span></h3>\n<h3><span id=\"나의-토이-프로젝트-공개하기\">나의 토이 프로젝트 공개하기</span></h3>\n<h3><span id=\"팀에서-사용하지-않는-기술이라면-그럼-나혼자-사용해-봄으로써-기술을-습득하면-된다\">팀에서 사용하지 않는 기술이라면 그럼 나혼자 사용해 봄으로써 기술을 습득하면 된다.</span></h3>\n<h3><span id=\"실력\">실력</span></h3>\n<h4><span id=\"지금-얼마나-알고-있는지\">지금 얼마나 알고 있는지</span></h4>\n<h4><span id=\"얼마나-빨리-배우는지\">얼마나 빨리 배우는지</span></h4>\n<h4><span id=\"지속적으로-학습하는지\">지속적으로 학습하는지</span></h4>\n<h3><span id=\"실력보다-중요한것은\">실력보다 중요한것은?</span></h3>\n<h4><span id=\"커뮤니케이션\">커뮤니케이션</span></h4>\n<ul>\n<li>함께 일하고 싶은 동료인가?</li>\n<li>정보 공유를 잘하고 나의 생산성을 향상시켜줄 수 있는 사람</li>\n<li>나중에 우리팀에 함께 일하고자 추천 할 수 있는 사람</li>\n</ul>\n<p>위 질문에 Yes! 라고 주변에서 말할수 있는 상태라면 성실하고 잘하는 개발자이며 나아가 사람들과 잘 소통하고 끌어당기는 힘 개발 그이상에 힘이 있다고 생각한다.</p>\n<h2><span id=\"오픈소스-개발자-이야기-20170701_오픈소스-개발자의-공부방법강대명\">오픈소스 개발자 이야기 20170701_오픈소스 개발자의 공부방법(강대명)</span></h2>\n<hr>\n<p><a href=\"https://goo.gl/7C17Tw\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">보러가기</a></p>\n<h3><span id=\"절대적인-노력과-시간은-필요함\">절대적인 노력과 시간은 필요함</span></h3>\n<h3><span id=\"기반지식\">기반지식</span></h3>\n<p>강대명 개발자님은 새로운 것을 접할 때 쉬운책을 3~4권 정도 본다든지 어떤 기술을 습득할 때 이 기술이 왜 탄생했는지에 대한 탄생,역사 등을 접한다고 했다.<br>\n이것은 기반지식을 쌓는 행위라고 생각한다. 예전 부터 나도 기반지식에 대한 의미를 생각 했었는데 누군가의 이야기가 이해 되지 않는 경우는 2가지라고 했다.</p>\n<ul>\n<li>내용자체가 어려운 경우</li>\n<li>기반 지식(컨텍스트)이 부족한 경우</li>\n</ul>\n<p>바로 2번째 경우에서 기반 지식은 곧 이해와 직결되는 사항이라 생각한다.<br>\n이해라는 전체적인 그림을 그리기 위해서 각 기반 지식들이 퍼즐 조각과도 같은 것이다.<br>\n따라서 새로운 개념을 습득할 때 기반지식이 없는 상태라면 아래와 같은 행위로 기반지식을 많이 쌓아두면 점점 익숙해져서 더 많이 깨닿고 습득 할 수 있을 거라 생각한다.</p>\n<ul>\n<li>쉬운 개념부터 0부터 100까지 빠르게 습득한다. (예) 기본 서적, 동영상, 블로그 활용)</li>\n<li>탄생, 역사에 대한 히스토리를 보며 탄생의도를 파악한다.</li>\n<li>제일 중요한건 내가 배우고 싶어하는 호기심과 관심이다.</li>\n<li>그 관심을 가지고 토이프로젝트를 하면 최고다.</li>\n<li>그 과정에서 알게되고 적용했을때 즐거움이 좋은 선순환을 만들 것이다.</li>\n</ul>\n<h3><span id=\"공부-방법에-중요성\">공부 방법에 중요성</span></h3>\n<blockquote>\n<p>추가적인 지식습득 없이 특정 방법으로 14%의 수학 성적 향상<br>\n올바른 방법만 바꿔도 Input 되는 지식없이도 실력이 향상된다는 것이고 이는 프로그래밍에도 적용된다고 한다.<br>\n나 또한 같은 생각이며 항상 올바른 방법을 추가하며 공부해야 한다고 생각한다.</p>\n</blockquote>\n<h3><span id=\"의식적인-연습\">의식적인 연습</span></h3>\n<h4><span id=\"스타크래프트-럴커-피하기-연습\">스타크래프트 럴커 피하기 연습</span></h4>\n<p>프로게이머는 럴커 피하기 연습을 할 때 촉수가 delay 되는 시간 촉수를 피하기 위해 마우스 포인터 위치를 파악하여 끊임없는 반복 연습을 하여 럴커를 피하게 된다.</p>\n<blockquote>\n<p>의식적 연습이란 럴커를 피하기 위한 의식적 생각에 답으로 delay 시간과 마우스 포인트 위치를 파악하여 집중 노력을 했다는 것이다.<br>\n프로그래머가 어떠한 새로운 개념,기술,지식을 습득하기 위해선 내가 얻고자 하는 그 무언가를 전략적이고 의식적인 생각을 통해 끊임없이 노력, 제대로 된 노력, 정확 노력을 집중해서 하는 것이라고 생각한다.</p>\n</blockquote>\n<p>관련된 내용에 추천 책</p>\n<ul>\n<li><a href=\"https://goo.gl/DB6dKW\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">아웃라이어</a></li>\n<li><a href=\"https://goo.gl/AbmyPJ\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">1만 시간의 재발견</a></li>\n</ul>\n<h3><span id=\"피드백\">피드백</span></h3>\n<p>반드시 필요한 단계이다.<br>\n투입한 나의 코스트가 낭비되지 않으려면 최대한 빨리 피드백을 받아 나의 상태를 진단하여 무엇이 잘못된지를 파악하여 계획을 다시 잡을 수 있다.</p>\n<blockquote>\n<p>제가 아는 모분은 아는 사람 볼때마다 코드 리뷰 부탁합니다.</p>\n</blockquote>\n<p>정말 개발을 잘하고 싶어하는 의지가 보이는 개발자인거 같다.<br>\n나도 위와 같은 행동이 정말 필요하다 생각하는데 실천은 잘 안되는거 같다.<br>\n정말 빨리 배우고 습득하고 싶다면 반드시 필요한 행동이라 생각한다.</p>\n<p>피드백 받는 방법은</p>\n<ul>\n<li>잘하는 선배 개발자에게 질문, 리뷰 요청</li>\n<li>웹상에서 질문</li>\n<li>오픈소스 개발 활동</li>\n</ul>\n<h3><span id=\"교정\">교정</span></h3>\n<p>피드백을 통해 알게 된 내용을 바탕으로 실제 고쳐서 적용하는 것</p>\n<h3><span id=\"그리고-다시-의식적인-연습\">그리고 다시 의식적인 연습</span></h3>\n<p>고쳐진 방법으로 다시 의식적인 연습</p>\n<h2><span id=\"그래서-나는-어떻게\">그래서 나는 어떻게??</span></h2>\n<hr>\n<h3><span id=\"의식적연습-gt-피드백-gt-교정-gt-의시적연습-반복\">의식적연습 -&gt; 피드백 -&gt; 교정 -&gt; 의시적연습 반복</span></h3>\n<p>각 단계에 대한 충실하게 지속적인 실천을 한다.</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>작성 동기</h1>\n<p>개발자 어떻게 공부 해야 할까? 그 대답을 찾기위해 고민하고 스스롭 방법을 정립을 머릿속으로만 하였다.<br>\n<strong>“개발자 공부”</strong> 에 대한 선배 개발자님들에 영감을 얻고 내 나름데로 생각을 정리하고 방법을 정립하기 위해 작성해 본다.</p>\n<h1>먼저 영감을준 선배 개발자님들에 조언 정리</h1>\n<h2>개발자의 평생 공부 | 임백준</h2>\n<hr>\n<p><a href=\"https://goo.gl/26K1HE\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">보러가기</a></p>\n<h2>개발자는 어떻게 성장해야 할까? | 강대명</h2>\n<hr>\n<p><a href=\"https://goo.gl/4fcv6r\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">보러가기</a></p>\n<h3>내가 흥미 있는 주제 위주로 블로그 하기</h3>\n<h3>나의 토이 프로젝트 공개하기</h3>\n<h3>팀에서 사용하지 않는 기술이라면 그럼 나혼자 사용해 봄으로써 기술을 습득하면 된다.</h3>\n<h3>실력</h3>\n<h4>지금 얼마나 알고 있는지</h4>\n<h4>얼마나 빨리 배우는지</h4>\n<h4>지속적으로 학습하는지</h4>\n<h3>실력보다 중요한것은?</h3>\n<h4>커뮤니케이션</h4>\n<ul>\n<li>함께 일하고 싶은 동료인가?</li>\n<li>정보 공유를 잘하고 나의 생산성을 향상시켜줄 수 있는 사람</li>\n<li>나중에 우리팀에 함께 일하고자 추천 할 수 있는 사람</li>\n</ul>\n<p>위 질문에 Yes! 라고 주변에서 말할수 있는 상태라면 성실하고 잘하는 개발자이며 나아가 사람들과 잘 소통하고 끌어당기는 힘 개발 그이상에 힘이 있다고 생각한다.</p>\n<h2>오픈소스 개발자 이야기 20170701_오픈소스 개발자의 공부방법(강대명)</h2>\n<hr>\n<p><a href=\"https://goo.gl/7C17Tw\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">보러가기</a></p>\n<h3>절대적인 노력과 시간은 필요함</h3>\n<h3>기반지식</h3>\n<p>강대명 개발자님은 새로운 것을 접할 때 쉬운책을 3~4권 정도 본다든지 어떤 기술을 습득할 때 이 기술이 왜 탄생했는지에 대한 탄생,역사 등을 접한다고 했다.<br>\n이것은 기반지식을 쌓는 행위라고 생각한다. 예전 부터 나도 기반지식에 대한 의미를 생각 했었는데 누군가의 이야기가 이해 되지 않는 경우는 2가지라고 했다.</p>\n<ul>\n<li>내용자체가 어려운 경우</li>\n<li>기반 지식(컨텍스트)이 부족한 경우</li>\n</ul>\n<p>바로 2번째 경우에서 기반 지식은 곧 이해와 직결되는 사항이라 생각한다.<br>\n이해라는 전체적인 그림을 그리기 위해서 각 기반 지식들이 퍼즐 조각과도 같은 것이다.<br>\n따라서 새로운 개념을 습득할 때 기반지식이 없는 상태라면 아래와 같은 행위로 기반지식을 많이 쌓아두면 점점 익숙해져서 더 많이 깨닿고 습득 할 수 있을 거라 생각한다.</p>\n<ul>\n<li>쉬운 개념부터 0부터 100까지 빠르게 습득한다. (예) 기본 서적, 동영상, 블로그 활용)</li>\n<li>탄생, 역사에 대한 히스토리를 보며 탄생의도를 파악한다.</li>\n<li>제일 중요한건 내가 배우고 싶어하는 호기심과 관심이다.</li>\n<li>그 관심을 가지고 토이프로젝트를 하면 최고다.</li>\n<li>그 과정에서 알게되고 적용했을때 즐거움이 좋은 선순환을 만들 것이다.</li>\n</ul>\n<h3>공부 방법에 중요성</h3>\n<blockquote>\n<p>추가적인 지식습득 없이 특정 방법으로 14%의 수학 성적 향상<br>\n올바른 방법만 바꿔도 Input 되는 지식없이도 실력이 향상된다는 것이고 이는 프로그래밍에도 적용된다고 한다.<br>\n나 또한 같은 생각이며 항상 올바른 방법을 추가하며 공부해야 한다고 생각한다.</p>\n</blockquote>\n<h3>의식적인 연습</h3>\n<h4>스타크래프트 럴커 피하기 연습</h4>\n<p>프로게이머는 럴커 피하기 연습을 할 때 촉수가 delay 되는 시간 촉수를 피하기 위해 마우스 포인터 위치를 파악하여 끊임없는 반복 연습을 하여 럴커를 피하게 된다.</p>\n<blockquote>\n<p>의식적 연습이란 럴커를 피하기 위한 의식적 생각에 답으로 delay 시간과 마우스 포인트 위치를 파악하여 집중 노력을 했다는 것이다.<br>\n프로그래머가 어떠한 새로운 개념,기술,지식을 습득하기 위해선 내가 얻고자 하는 그 무언가를 전략적이고 의식적인 생각을 통해 끊임없이 노력, 제대로 된 노력, 정확 노력을 집중해서 하는 것이라고 생각한다.</p>\n</blockquote>\n<p>관련된 내용에 추천 책</p>\n<ul>\n<li><a href=\"https://goo.gl/DB6dKW\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">아웃라이어</a></li>\n<li><a href=\"https://goo.gl/AbmyPJ\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">1만 시간의 재발견</a></li>\n</ul>\n<h3>피드백</h3>\n<p>반드시 필요한 단계이다.<br>\n투입한 나의 코스트가 낭비되지 않으려면 최대한 빨리 피드백을 받아 나의 상태를 진단하여 무엇이 잘못된지를 파악하여 계획을 다시 잡을 수 있다.</p>\n<blockquote>\n<p>제가 아는 모분은 아는 사람 볼때마다 코드 리뷰 부탁합니다.</p>\n</blockquote>\n<p>정말 개발을 잘하고 싶어하는 의지가 보이는 개발자인거 같다.<br>\n나도 위와 같은 행동이 정말 필요하다 생각하는데 실천은 잘 안되는거 같다.<br>\n정말 빨리 배우고 습득하고 싶다면 반드시 필요한 행동이라 생각한다.</p>\n<p>피드백 받는 방법은</p>\n<ul>\n<li>잘하는 선배 개발자에게 질문, 리뷰 요청</li>\n<li>웹상에서 질문</li>\n<li>오픈소스 개발 활동</li>\n</ul>\n<h3>교정</h3>\n<p>피드백을 통해 알게 된 내용을 바탕으로 실제 고쳐서 적용하는 것</p>\n<h3>그리고 다시 의식적인 연습</h3>\n<p>고쳐진 방법으로 다시 의식적인 연습</p>\n<h2>그래서 나는 어떻게??</h2>\n<hr>\n<h3>의식적연습 -&gt; 피드백 -&gt; 교정 -&gt; 의시적연습 반복</h3>\n<p>각 단계에 대한 충실하게 지속적인 실천을 한다.</p>\n"},{"title":"Spring AOP 적용시 주의사항","catalog":true,"date":"2018-12-03T16:03:21.000Z","subtitle":null,"header-img":"bg_computer.jpg","catagories":["Spring"],"_content":"\n\n## 기반개념\n---\n1.Componet Scan\n2.Root-context, servlet-context\n3.Spring AOP 방식\n\n\n## 현상\n---\n1.point cut excution 패턴 적용 하였지만 특정 패키지에서만 동작이 되고 Scheduled 사용된 클래스에서는 AOP 적용, 즉 트랜잭션 rollback이 안됨\n2.exception 발생시 catch 문에서 기존 동작 rollback하고 오류에 대한 insert를 하려 하는데 insert 까지 같이 rollback 됨\n\n## 원인\n---\n1.클래스내 모든 메소드가 private 메소드는 AOP 대상이 아님  [참고](https://goo.gl/rQnG4w)\n2.Spring AOP와 소스내 트랜잭션 rollback과 충돌 및 겹침 [참고](https://goo.gl/reS6sF)\n\n## 해결\n---\n1번 원인만 해결하면 된다면 특정 메소드 public으로 바꿔주면 해결된다. 대신 exception 발생시 무조건 rollback 된다. 정확히 말해서 해당 service단 클래스에서 완전히 throw해주어야 rollback이 된다.\n\n하지만 특정시점까지만 rollback 하고 그다움부턴 정상 commit 하고 싶은경우도 분명히 존재한다. 현상 2처럼 말이다. 그럴땐 Spring AOP 방식을 적용하지 않게 해야 한다. 안그러면 원인 2 처럼 되어 모두 rollback 이 되어 버린다.\n\n따라서 원인 2를 해결하려면 모두 메소드를 private으로 바꾸고 소스내에서 commit / rollback 을 수행하면 된다.\n\n\n## 코드\n~~~java\n\n*** 생략\n\ntry {\n  for (Map<String, Object> map : mBatchList) {\n\n  // 서비스별 dataSource 정보 갱신\n  bds = mDbConnMng.reNewDataSource(map.get(\"driver\").toString(), map.get(\"url\").toString(),map.get(\"username\").toString(),map.get(\"password\").toString());\n\n  // session open\n  session = mDbConnMng.openSession(false);\n\n  // mapper 호출\n  dao = session.getMapper(TransDataDao.class);\n\n  // ###### case 1 ######\n  /***************************************************************\n  // 해당 클래스 메소드 모두 private --> update 정상 동작\n  // 해당 클래스 메소드 한개 이상 public --> update 도 rollback 됨\n  // 정리하면\n  // Spring AOP Transaction 걸었는데 메소드내 트랜잭션 가져오면 충돌 나서 함수단위로 rollback이 안됨..\n  // 메소드내 트랜잭션 가져오려면 해당 클래스내 메소드를 모두 private로 해야 함..\n  // 반대로 Spring AOP Transaction 걸려면 public 메소드가 한개라도 있어야 함\n  ***************************************************************/\n\n  insertFirstData();\n  session.close();\n  }\n}catch (Exception e) {\n  throw e;\n}\n\nprivate void insertFirstData () throws Exception{\n\n  // ##### case 4 ###### worker 메소드 private으로 바꿈 (모든 메소드 private 이어야 함)\n  DefaultTransactionDefinition def = new DefaultTransactionDefinition();\n  def.setName(\"insert tx\");\n  def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n  TransactionStatus status = iCalDbConnection.getTransaction(def);\n\n  try {\n    int result = loadDataDao.insertData();\n    if(true) {\n      throw new Exception();\n    }\n    iCalDbConnection.commit(status);\n  } catch (Exception e) {\n    iCalDbConnection.rollback(status);\n    updateTest();\n    throw e;\n  }\n}\n\nprivate void updateTest() throws Exception{\n  int result = loadDataDao.updateTest();\n}\n\n\n\n\n// console log\n13:49:50 INFO {call SET_CAL_BISMALLLITE_INSERT() } // rollback 대상\n13:49:50 INFO |-------|\n13:49:50 INFO |RESULT |\n13:49:50 INFO |-------|\n13:49:50 INFO |1 |\n13:49:50 INFO |-------|\n13:49:52 INFO {call SP_SET_BATCH_LOG_UPDATE('F', 4, 0, 'N', 'ERR_CD!!!', 'ERROR 발생!!!!!!!') }  // insert/update 대상\n13:49:52 INFO |-------|\n13:49:52 INFO |result |\n13:49:52 INFO |-------|\n13:49:52 INFO |1 |\n13:49:52 INFO |-------|\n~~~\n\n\n## 공부해야 할 개념\n---\n1.Spring AOP 동작 방식\n","source":"_posts/[spring]Spring AOP 적용시 주의사항.md","raw":"---\ntitle: Spring AOP 적용시 주의사항\ncatalog: true\ndate: 2018-12-04 01:03:21\nsubtitle:\nheader-img: \"bg_computer.jpg\"\ntags:\n- Framework\n- Spring\ncatagories:\n- Spring\n---\n\n\n## 기반개념\n---\n1.Componet Scan\n2.Root-context, servlet-context\n3.Spring AOP 방식\n\n\n## 현상\n---\n1.point cut excution 패턴 적용 하였지만 특정 패키지에서만 동작이 되고 Scheduled 사용된 클래스에서는 AOP 적용, 즉 트랜잭션 rollback이 안됨\n2.exception 발생시 catch 문에서 기존 동작 rollback하고 오류에 대한 insert를 하려 하는데 insert 까지 같이 rollback 됨\n\n## 원인\n---\n1.클래스내 모든 메소드가 private 메소드는 AOP 대상이 아님  [참고](https://goo.gl/rQnG4w)\n2.Spring AOP와 소스내 트랜잭션 rollback과 충돌 및 겹침 [참고](https://goo.gl/reS6sF)\n\n## 해결\n---\n1번 원인만 해결하면 된다면 특정 메소드 public으로 바꿔주면 해결된다. 대신 exception 발생시 무조건 rollback 된다. 정확히 말해서 해당 service단 클래스에서 완전히 throw해주어야 rollback이 된다.\n\n하지만 특정시점까지만 rollback 하고 그다움부턴 정상 commit 하고 싶은경우도 분명히 존재한다. 현상 2처럼 말이다. 그럴땐 Spring AOP 방식을 적용하지 않게 해야 한다. 안그러면 원인 2 처럼 되어 모두 rollback 이 되어 버린다.\n\n따라서 원인 2를 해결하려면 모두 메소드를 private으로 바꾸고 소스내에서 commit / rollback 을 수행하면 된다.\n\n\n## 코드\n~~~java\n\n*** 생략\n\ntry {\n  for (Map<String, Object> map : mBatchList) {\n\n  // 서비스별 dataSource 정보 갱신\n  bds = mDbConnMng.reNewDataSource(map.get(\"driver\").toString(), map.get(\"url\").toString(),map.get(\"username\").toString(),map.get(\"password\").toString());\n\n  // session open\n  session = mDbConnMng.openSession(false);\n\n  // mapper 호출\n  dao = session.getMapper(TransDataDao.class);\n\n  // ###### case 1 ######\n  /***************************************************************\n  // 해당 클래스 메소드 모두 private --> update 정상 동작\n  // 해당 클래스 메소드 한개 이상 public --> update 도 rollback 됨\n  // 정리하면\n  // Spring AOP Transaction 걸었는데 메소드내 트랜잭션 가져오면 충돌 나서 함수단위로 rollback이 안됨..\n  // 메소드내 트랜잭션 가져오려면 해당 클래스내 메소드를 모두 private로 해야 함..\n  // 반대로 Spring AOP Transaction 걸려면 public 메소드가 한개라도 있어야 함\n  ***************************************************************/\n\n  insertFirstData();\n  session.close();\n  }\n}catch (Exception e) {\n  throw e;\n}\n\nprivate void insertFirstData () throws Exception{\n\n  // ##### case 4 ###### worker 메소드 private으로 바꿈 (모든 메소드 private 이어야 함)\n  DefaultTransactionDefinition def = new DefaultTransactionDefinition();\n  def.setName(\"insert tx\");\n  def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);\n  TransactionStatus status = iCalDbConnection.getTransaction(def);\n\n  try {\n    int result = loadDataDao.insertData();\n    if(true) {\n      throw new Exception();\n    }\n    iCalDbConnection.commit(status);\n  } catch (Exception e) {\n    iCalDbConnection.rollback(status);\n    updateTest();\n    throw e;\n  }\n}\n\nprivate void updateTest() throws Exception{\n  int result = loadDataDao.updateTest();\n}\n\n\n\n\n// console log\n13:49:50 INFO {call SET_CAL_BISMALLLITE_INSERT() } // rollback 대상\n13:49:50 INFO |-------|\n13:49:50 INFO |RESULT |\n13:49:50 INFO |-------|\n13:49:50 INFO |1 |\n13:49:50 INFO |-------|\n13:49:52 INFO {call SP_SET_BATCH_LOG_UPDATE('F', 4, 0, 'N', 'ERR_CD!!!', 'ERROR 발생!!!!!!!') }  // insert/update 대상\n13:49:52 INFO |-------|\n13:49:52 INFO |result |\n13:49:52 INFO |-------|\n13:49:52 INFO |1 |\n13:49:52 INFO |-------|\n~~~\n\n\n## 공부해야 할 개념\n---\n1.Spring AOP 동작 방식\n","slug":"[spring]Spring AOP 적용시 주의사항","published":1,"updated":"2018-12-04T15:37:44.126Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq5at3fw0008lwotn3egezk0","content":"<h2><span id=\"기반개념\">기반개념</span></h2>\n<hr>\n<p>1.Componet Scan<br>\n2.Root-context, servlet-context<br>\n3.Spring AOP 방식</p>\n<h2><span id=\"현상\">현상</span></h2>\n<hr>\n<p>1.point cut excution 패턴 적용 하였지만 특정 패키지에서만 동작이 되고 Scheduled 사용된 클래스에서는 AOP 적용, 즉 트랜잭션 rollback이 안됨<br>\n2.exception 발생시 catch 문에서 기존 동작 rollback하고 오류에 대한 insert를 하려 하는데 insert 까지 같이 rollback 됨</p>\n<h2><span id=\"원인\">원인</span></h2>\n<hr>\n<p>1.클래스내 모든 메소드가 private 메소드는 AOP 대상이 아님  <a href=\"https://goo.gl/rQnG4w\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">참고</a><br>\n2.Spring AOP와 소스내 트랜잭션 rollback과 충돌 및 겹침 <a href=\"https://goo.gl/reS6sF\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">참고</a></p>\n<h2><span id=\"해결\">해결</span></h2>\n<hr>\n<p>1번 원인만 해결하면 된다면 특정 메소드 public으로 바꿔주면 해결된다. 대신 exception 발생시 무조건 rollback 된다. 정확히 말해서 해당 service단 클래스에서 완전히 throw해주어야 rollback이 된다.</p>\n<p>하지만 특정시점까지만 rollback 하고 그다움부턴 정상 commit 하고 싶은경우도 분명히 존재한다. 현상 2처럼 말이다. 그럴땐 Spring AOP 방식을 적용하지 않게 해야 한다. 안그러면 원인 2 처럼 되어 모두 rollback 이 되어 버린다.</p>\n<p>따라서 원인 2를 해결하려면 모두 메소드를 private으로 바꾸고 소스내에서 commit / rollback 을 수행하면 된다.</p>\n<h2><span id=\"코드\">코드</span></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*** 생략</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (Map&lt;String, Object&gt; map : mBatchList) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 서비스별 dataSource 정보 갱신</span></span><br><span class=\"line\">  bds = mDbConnMng.reNewDataSource(map.get(<span class=\"string\">\"driver\"</span>).toString(), map.get(<span class=\"string\">\"url\"</span>).toString(),map.get(<span class=\"string\">\"username\"</span>).toString(),map.get(<span class=\"string\">\"password\"</span>).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// session open</span></span><br><span class=\"line\">  session = mDbConnMng.openSession(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// mapper 호출</span></span><br><span class=\"line\">  dao = session.getMapper(TransDataDao.class);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ###### case 1 ######</span></span><br><span class=\"line\">  <span class=\"comment\">/***************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  // 해당 클래스 메소드 모두 private --&gt; update 정상 동작</span></span><br><span class=\"line\"><span class=\"comment\">  // 해당 클래스 메소드 한개 이상 public --&gt; update 도 rollback 됨</span></span><br><span class=\"line\"><span class=\"comment\">  // 정리하면</span></span><br><span class=\"line\"><span class=\"comment\">  // Spring AOP Transaction 걸었는데 메소드내 트랜잭션 가져오면 충돌 나서 함수단위로 rollback이 안됨..</span></span><br><span class=\"line\"><span class=\"comment\">  // 메소드내 트랜잭션 가져오려면 해당 클래스내 메소드를 모두 private로 해야 함..</span></span><br><span class=\"line\"><span class=\"comment\">  // 반대로 Spring AOP Transaction 걸려면 public 메소드가 한개라도 있어야 함</span></span><br><span class=\"line\"><span class=\"comment\">  ***************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  insertFirstData();</span><br><span class=\"line\">  session.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insertFirstData</span> <span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ##### case 4 ###### worker 메소드 private으로 바꿈 (모든 메소드 private 이어야 함)</span></span><br><span class=\"line\">  DefaultTransactionDefinition def = <span class=\"keyword\">new</span> DefaultTransactionDefinition();</span><br><span class=\"line\">  def.setName(<span class=\"string\">\"insert tx\"</span>);</span><br><span class=\"line\">  def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">  TransactionStatus status = iCalDbConnection.getTransaction(def);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = loadDataDao.insertData();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    iCalDbConnection.commit(status);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    iCalDbConnection.rollback(status);</span><br><span class=\"line\">    updateTest();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = loadDataDao.updateTest();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console log</span></span><br><span class=\"line\"><span class=\"number\">13</span>:<span class=\"number\">49</span>:<span class=\"number\">50</span> INFO &#123;<span class=\"function\">call <span class=\"title\">SET_CAL_BISMALLLITE_INSERT</span><span class=\"params\">()</span> &#125; <span class=\"comment\">// rollback 대상</span></span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |RESULT |</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |1 |</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO </span>&#123;<span class=\"function\">call <span class=\"title\">SP_SET_BATCH_LOG_UPDATE</span><span class=\"params\">(<span class=\"string\">'F'</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'ERR_CD!!!'</span>, <span class=\"string\">'ERROR 발생!!!!!!!'</span>)</span> &#125;  <span class=\"comment\">// insert/update 대상</span></span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |result |</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |1 |</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |-------|</span></span><br></pre></td></tr></table></figure>\n<h2><span id=\"공부해야-할-개념\">공부해야 할 개념</span></h2>\n<hr>\n<p>1.Spring AOP 동작 방식</p>\n","site":{"data":{}},"excerpt":"","more":"<h2>기반개념</h2>\n<hr>\n<p>1.Componet Scan<br>\n2.Root-context, servlet-context<br>\n3.Spring AOP 방식</p>\n<h2>현상</h2>\n<hr>\n<p>1.point cut excution 패턴 적용 하였지만 특정 패키지에서만 동작이 되고 Scheduled 사용된 클래스에서는 AOP 적용, 즉 트랜잭션 rollback이 안됨<br>\n2.exception 발생시 catch 문에서 기존 동작 rollback하고 오류에 대한 insert를 하려 하는데 insert 까지 같이 rollback 됨</p>\n<h2>원인</h2>\n<hr>\n<p>1.클래스내 모든 메소드가 private 메소드는 AOP 대상이 아님  <a href=\"https://goo.gl/rQnG4w\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">참고</a><br>\n2.Spring AOP와 소스내 트랜잭션 rollback과 충돌 및 겹침 <a href=\"https://goo.gl/reS6sF\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">참고</a></p>\n<h2>해결</h2>\n<hr>\n<p>1번 원인만 해결하면 된다면 특정 메소드 public으로 바꿔주면 해결된다. 대신 exception 발생시 무조건 rollback 된다. 정확히 말해서 해당 service단 클래스에서 완전히 throw해주어야 rollback이 된다.</p>\n<p>하지만 특정시점까지만 rollback 하고 그다움부턴 정상 commit 하고 싶은경우도 분명히 존재한다. 현상 2처럼 말이다. 그럴땐 Spring AOP 방식을 적용하지 않게 해야 한다. 안그러면 원인 2 처럼 되어 모두 rollback 이 되어 버린다.</p>\n<p>따라서 원인 2를 해결하려면 모두 메소드를 private으로 바꾸고 소스내에서 commit / rollback 을 수행하면 된다.</p>\n<h2>코드</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">*** 생략</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (Map&lt;String, Object&gt; map : mBatchList) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 서비스별 dataSource 정보 갱신</span></span><br><span class=\"line\">  bds = mDbConnMng.reNewDataSource(map.get(<span class=\"string\">\"driver\"</span>).toString(), map.get(<span class=\"string\">\"url\"</span>).toString(),map.get(<span class=\"string\">\"username\"</span>).toString(),map.get(<span class=\"string\">\"password\"</span>).toString());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// session open</span></span><br><span class=\"line\">  session = mDbConnMng.openSession(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// mapper 호출</span></span><br><span class=\"line\">  dao = session.getMapper(TransDataDao.class);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ###### case 1 ######</span></span><br><span class=\"line\">  <span class=\"comment\">/***************************************************************</span></span><br><span class=\"line\"><span class=\"comment\">  // 해당 클래스 메소드 모두 private --&gt; update 정상 동작</span></span><br><span class=\"line\"><span class=\"comment\">  // 해당 클래스 메소드 한개 이상 public --&gt; update 도 rollback 됨</span></span><br><span class=\"line\"><span class=\"comment\">  // 정리하면</span></span><br><span class=\"line\"><span class=\"comment\">  // Spring AOP Transaction 걸었는데 메소드내 트랜잭션 가져오면 충돌 나서 함수단위로 rollback이 안됨..</span></span><br><span class=\"line\"><span class=\"comment\">  // 메소드내 트랜잭션 가져오려면 해당 클래스내 메소드를 모두 private로 해야 함..</span></span><br><span class=\"line\"><span class=\"comment\">  // 반대로 Spring AOP Transaction 걸려면 public 메소드가 한개라도 있어야 함</span></span><br><span class=\"line\"><span class=\"comment\">  ***************************************************************/</span></span><br><span class=\"line\"></span><br><span class=\"line\">  insertFirstData();</span><br><span class=\"line\">  session.close();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">insertFirstData</span> <span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ##### case 4 ###### worker 메소드 private으로 바꿈 (모든 메소드 private 이어야 함)</span></span><br><span class=\"line\">  DefaultTransactionDefinition def = <span class=\"keyword\">new</span> DefaultTransactionDefinition();</span><br><span class=\"line\">  def.setName(<span class=\"string\">\"insert tx\"</span>);</span><br><span class=\"line\">  def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);</span><br><span class=\"line\">  TransactionStatus status = iCalDbConnection.getTransaction(def);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> result = loadDataDao.insertData();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    iCalDbConnection.commit(status);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">    iCalDbConnection.rollback(status);</span><br><span class=\"line\">    updateTest();</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">updateTest</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> result = loadDataDao.updateTest();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// console log</span></span><br><span class=\"line\"><span class=\"number\">13</span>:<span class=\"number\">49</span>:<span class=\"number\">50</span> INFO &#123;<span class=\"function\">call <span class=\"title\">SET_CAL_BISMALLLITE_INSERT</span><span class=\"params\">()</span> &#125; <span class=\"comment\">// rollback 대상</span></span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |RESULT |</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |1 |</span></span><br><span class=\"line\"><span class=\"function\">13:49:50 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO </span>&#123;<span class=\"function\">call <span class=\"title\">SP_SET_BATCH_LOG_UPDATE</span><span class=\"params\">(<span class=\"string\">'F'</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>, <span class=\"string\">'N'</span>, <span class=\"string\">'ERR_CD!!!'</span>, <span class=\"string\">'ERROR 발생!!!!!!!'</span>)</span> &#125;  <span class=\"comment\">// insert/update 대상</span></span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |result |</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |-------|</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |1 |</span></span><br><span class=\"line\"><span class=\"function\">13:49:52 INFO |-------|</span></span><br></pre></td></tr></table></figure>\n<h2>공부해야 할 개념</h2>\n<hr>\n<p>1.Spring AOP 동작 방식</p>\n"},{"title":"Quartz를 활용한 실시간 배치 동적 스케줄러 사용기","catalog":true,"date":"2018-12-05T13:32:21.000Z","subtitle":null,"header-img":"bg_computer.jpg","catagories":["Library"],"_content":"\n# 어떤 시스템인가\n- DB 접속하여 데이터를 실시간 주기로 데이터를 targetDB에 적재하는 스케줄러 배치 모듈\n- 서버 중단 없이 스케줄 주기 동적 변경\n- 서버 중단 없이 이관 DB 추가 하여 스케줄 배치 수행\n- 이관해야 하는 DB 접속수가 늘어나도 각각 스케쥴 배치 수행\n- 기본적 서버 이중화 이지만 서버가 늘어나도 서버별 스케줄 배치 수행 (서버 클러스터링)\n- 한쪽 서버가 죽어도 나머지 서버가 죽은 서버의 스케줄 배치 까지 수행\n\n# 왜 Quartz를 사용 하였는가\n{% asset_img \"post_clustering.jpg\" %}  \n- 서버 클러스터링을 사용하기 위해  \n- 서버 클러스터링이 필요한 이유는 만들고자 하는 배치 스케줄 모듈이 시간이 지날수록 이관해야 하는 DB가 늘어나는 만큼 서버 부하를 분산시키기 위해\n\n## quartz clsutering 동작 과정\n아래 표는 실제 서버를 각각 shutdown 시켜가면서 quartz clustering 동작을 눈으로 확인한 과정을 적은 것이다.  \n\n{% asset_img \"post-quartz-clustering-mode-example.png\" %}  \n \n\n## 그럼 도대체 clustering 기능은 어떻게 사용한단 말인가\n\n- quartz 테이블 생성 [[생성 스크립트 이동]](https://goo.gl/HyRE2Q)\n- quartz instance property 설정\n- quartz jobStore property 설정  (property 설정 방법은 아래 quartz 설정 방법 부분 참고)  \n\nQuartz instance property 에 대한 공식 설명을 먼저 보자\n\n>org.quartz.scheduler.instanceName  \nCan be any string, and the value has no meaning to the scheduler itself - but rather serves as a mechanism for client code to distinguish schedulers when multiple instances are used within the same program. If you are using the clustering features, you must use the same name for every instance in the cluster that is ‘logically’ the same Scheduler.  \n\n>org.quartz.scheduler.instanceId  \nCan be any string, but must be unique for all schedulers working as if they are the same ‘logical’ Scheduler within a cluster. You may use the value “AUTO” as the instanceId if you wish the Id to be generated for you. Or the value “SYS_PROP” if you want the value to come from the system property “org.quartz.scheduler.instanceId”.\n\n정리하면 cluster mode를 사용하려면 같은 instanceName을 가진 서버별 고유에 instanceId를 가져야 cluster mode를 이용 할 수 있다는 뜻이다.\n\n\n~~~ propertis\n// scheduler identity\norg.quartz.scheduler.instanceName = QUAARTZ-SCHEDULER\norg.quartz.scheduler.instanceId = MASTER\n\n// cluster 관련 설정\norg.quartz.jobStore.misfireThreshold = 60000\norg.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX\norg.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.MSSQLDelegate\norg.quartz.jobStore.dataSource = myDS\norg.quartz.jobStore.tablePrefix = QRTZ_\norg.quartz.jobStore.isClustered = true\norg.quartz.jobStore.clusterCheckinInterval = 1000\n~~~\n\n그 밖의 quartz config 설정은 [quartz 레퍼런스 문서](https://goo.gl/jXEZfS)를 보는게 제일 정확하므로 참고하여 설정하면 된다.\n\n\n# Quartz 셋팅\n\n## 프로젝트 환경 및 버전\nJava8 + Spring 3.1.1 + Quartz 2.2.1 + Maven\n\n## Spring 4 일 경우는 아래 추가로 dependency 해주어야 한다.\n~~~ xml\n<dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>\n       <version>4.0.0.RELEASE</version>\n</dependency>\n~~~\n\n해주지 않으면  org.springframework.scheduling.quartz 패키지가 존재 하지 않는다. (Spring 3은 spring-context-support dependency 안해줘도 됨)\n\n\n## Quartz Spring Bean 등록\n\n~~~ java\n@Bean\npublic SchedulerFactoryBean quartzScheduler() throws Exception {\n\tschedulerFactoryBean = new SchedulerFactoryBean();\n\t\n\tschedulerFactoryBean.setSchedulerName(\"name\");\n\tAutowiringSpringBeanJobFactory jobFactory = new AutowiringSpringBeanJobFactory();\n\tjobFactory.setApplicationContext(applicationContext);\n\t\n\tschedulerFactoryBean.setJobFactory(jobFactory);\n\tschedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(true);\n\tschedulerFactoryBean.setOverwriteExistingJobs(true);\n\tschedulerFactoryBean.setAutoStartup(true);\n\tschedulerFactoryBean.setQuartzProperties(quartzProperties());\n\treturn schedulerFactoryBean;\n}\n~~~\n\n\n\n## 객체 설명\n\n### SchedulerFactoryBean 객체 (org.springframework.scheduling.quartz)\nSpring Framework에서 Quartz를 bean으로 관리하기 위해 필요한 클래스로 Spring에서 Quartz를 사용하기 위해 필요함\n\n\n### AutowiringSpringBeanJobFactory 객체\norg.quartz.Job 을 implements한 Job 클래스내에서 @Autowired 할 수 있도록 하기 위해서 사용함\n\n## 왜 필요한가\n구현한 Job 클래스에서 주입 받아야 하는 경우가 반드시 존재 하기 때문이다.  \n예를 들면 DAO 클래스 이다. 필자 같은 경우는 데이터를 DB INSERT 해야하는 경우로 Job 클래스에 DAO를 반드시 주입받아야 하기에 반드시 필요했다.  \n만약 객체를 생성하지 않으면 @Autowired 해도 객체가 null 이다.\n\n## 그럼 왜 AutowiringSpringBeanJobFactory 객체 생성해야 @Autowired 할 수 있었을까??\n\n해당 내용은 Spring Container 어떻게 Bean을 관리하는지에 대한 개념을 알아야 이해 할 수 있으며 해당 개념을 필자도 알고 싶어서 조사해 봤다.  \n그냥 추가해야 된다는 것만 알고 넘어 가고 싶다면 다음 주제로 넘어가면 되고 Spring이 bean 관리 메커니즘에 대해 궁금 하다면 아래를 보자\n\n~~~ java\nimport org.quartz.spi.TriggerFiredBundle;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.AutowireCapableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.scheduling.quartz.SpringBeanJobFactory;\n\npublic class AutowiringSpringBeanJobFactory extends SpringBeanJobFactory implements ApplicationContextAware {\n\n\tprivate transient AutowireCapableBeanFactory beanFactory;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t\tbeanFactory = applicationContext.getAutowireCapableBeanFactory();\n\t}\n\n\t@Override\n\tprotected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {\n\t\tfinal Object job = super.createJobInstance(bundle);\n\t\tbeanFactory.autowireBean(job);\n\t\treturn job;\n\t}\n}\n~~~\n\n// TODO Posting spring은 어떻게 bean관리를 하는가\n\n\n## Quartz 실행 화면\n{% asset_img \"post-quartz-clustering-mode-log.png\" %}  \n\nquartz 셋팅을 마치고 was를 기동하면 위 로그와 같이 quartz 버전, 클러스터 모드 on/off 여부, Thread pool 갯수 등 정보가 나온다.  \ncluster mode가 제대로 동작한다면 노란색 박스 로그와 같이 설정한 check interval time에 맞게 로그가 계속 찍힐 것이다.  \n다른 서버가 살아있는지 계속 체크하고 있는 것이다. (로그를 볼때는 debug 레벨로 해야 보임)\n\n\n\n## 그 밖의\n\n### @DisallowConcurrentExecution\nThread Pool 기반으로 동작하는 Quatrz에서 Job에 대한 Thread 동시 접근으로 인해 데이터 중복을 방지하기 위한 어노테이션 인거 같다.\n나는 동시접근 못하게 코드로 막았는데 이런게 있는줄 알았으면 쉽게 해결했을거 같다.\n\n\n## 남은것은?\n- quartz 레퍼런스 문서를 더 꼼꼼히 보고 best pratice 데로 하고있는지 점검\n- quartz + spring batch 조합 해보기\n- 리펙토링","source":"_posts/[quartz] 실시간 배치 동적 스케줄러 사용기.md","raw":"---\ntitle: Quartz를 활용한 실시간 배치 동적 스케줄러 사용기\ncatalog: true\ndate: 2018-12-05 22:32:21\nsubtitle:\nheader-img: \"bg_computer.jpg\"\ntags:\n- Library\n- Quartz\ncatagories:\n- Library\n---\n\n# 어떤 시스템인가\n- DB 접속하여 데이터를 실시간 주기로 데이터를 targetDB에 적재하는 스케줄러 배치 모듈\n- 서버 중단 없이 스케줄 주기 동적 변경\n- 서버 중단 없이 이관 DB 추가 하여 스케줄 배치 수행\n- 이관해야 하는 DB 접속수가 늘어나도 각각 스케쥴 배치 수행\n- 기본적 서버 이중화 이지만 서버가 늘어나도 서버별 스케줄 배치 수행 (서버 클러스터링)\n- 한쪽 서버가 죽어도 나머지 서버가 죽은 서버의 스케줄 배치 까지 수행\n\n# 왜 Quartz를 사용 하였는가\n{% asset_img \"post_clustering.jpg\" %}  \n- 서버 클러스터링을 사용하기 위해  \n- 서버 클러스터링이 필요한 이유는 만들고자 하는 배치 스케줄 모듈이 시간이 지날수록 이관해야 하는 DB가 늘어나는 만큼 서버 부하를 분산시키기 위해\n\n## quartz clsutering 동작 과정\n아래 표는 실제 서버를 각각 shutdown 시켜가면서 quartz clustering 동작을 눈으로 확인한 과정을 적은 것이다.  \n\n{% asset_img \"post-quartz-clustering-mode-example.png\" %}  \n \n\n## 그럼 도대체 clustering 기능은 어떻게 사용한단 말인가\n\n- quartz 테이블 생성 [[생성 스크립트 이동]](https://goo.gl/HyRE2Q)\n- quartz instance property 설정\n- quartz jobStore property 설정  (property 설정 방법은 아래 quartz 설정 방법 부분 참고)  \n\nQuartz instance property 에 대한 공식 설명을 먼저 보자\n\n>org.quartz.scheduler.instanceName  \nCan be any string, and the value has no meaning to the scheduler itself - but rather serves as a mechanism for client code to distinguish schedulers when multiple instances are used within the same program. If you are using the clustering features, you must use the same name for every instance in the cluster that is ‘logically’ the same Scheduler.  \n\n>org.quartz.scheduler.instanceId  \nCan be any string, but must be unique for all schedulers working as if they are the same ‘logical’ Scheduler within a cluster. You may use the value “AUTO” as the instanceId if you wish the Id to be generated for you. Or the value “SYS_PROP” if you want the value to come from the system property “org.quartz.scheduler.instanceId”.\n\n정리하면 cluster mode를 사용하려면 같은 instanceName을 가진 서버별 고유에 instanceId를 가져야 cluster mode를 이용 할 수 있다는 뜻이다.\n\n\n~~~ propertis\n// scheduler identity\norg.quartz.scheduler.instanceName = QUAARTZ-SCHEDULER\norg.quartz.scheduler.instanceId = MASTER\n\n// cluster 관련 설정\norg.quartz.jobStore.misfireThreshold = 60000\norg.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX\norg.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.MSSQLDelegate\norg.quartz.jobStore.dataSource = myDS\norg.quartz.jobStore.tablePrefix = QRTZ_\norg.quartz.jobStore.isClustered = true\norg.quartz.jobStore.clusterCheckinInterval = 1000\n~~~\n\n그 밖의 quartz config 설정은 [quartz 레퍼런스 문서](https://goo.gl/jXEZfS)를 보는게 제일 정확하므로 참고하여 설정하면 된다.\n\n\n# Quartz 셋팅\n\n## 프로젝트 환경 및 버전\nJava8 + Spring 3.1.1 + Quartz 2.2.1 + Maven\n\n## Spring 4 일 경우는 아래 추가로 dependency 해주어야 한다.\n~~~ xml\n<dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>\n       <version>4.0.0.RELEASE</version>\n</dependency>\n~~~\n\n해주지 않으면  org.springframework.scheduling.quartz 패키지가 존재 하지 않는다. (Spring 3은 spring-context-support dependency 안해줘도 됨)\n\n\n## Quartz Spring Bean 등록\n\n~~~ java\n@Bean\npublic SchedulerFactoryBean quartzScheduler() throws Exception {\n\tschedulerFactoryBean = new SchedulerFactoryBean();\n\t\n\tschedulerFactoryBean.setSchedulerName(\"name\");\n\tAutowiringSpringBeanJobFactory jobFactory = new AutowiringSpringBeanJobFactory();\n\tjobFactory.setApplicationContext(applicationContext);\n\t\n\tschedulerFactoryBean.setJobFactory(jobFactory);\n\tschedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(true);\n\tschedulerFactoryBean.setOverwriteExistingJobs(true);\n\tschedulerFactoryBean.setAutoStartup(true);\n\tschedulerFactoryBean.setQuartzProperties(quartzProperties());\n\treturn schedulerFactoryBean;\n}\n~~~\n\n\n\n## 객체 설명\n\n### SchedulerFactoryBean 객체 (org.springframework.scheduling.quartz)\nSpring Framework에서 Quartz를 bean으로 관리하기 위해 필요한 클래스로 Spring에서 Quartz를 사용하기 위해 필요함\n\n\n### AutowiringSpringBeanJobFactory 객체\norg.quartz.Job 을 implements한 Job 클래스내에서 @Autowired 할 수 있도록 하기 위해서 사용함\n\n## 왜 필요한가\n구현한 Job 클래스에서 주입 받아야 하는 경우가 반드시 존재 하기 때문이다.  \n예를 들면 DAO 클래스 이다. 필자 같은 경우는 데이터를 DB INSERT 해야하는 경우로 Job 클래스에 DAO를 반드시 주입받아야 하기에 반드시 필요했다.  \n만약 객체를 생성하지 않으면 @Autowired 해도 객체가 null 이다.\n\n## 그럼 왜 AutowiringSpringBeanJobFactory 객체 생성해야 @Autowired 할 수 있었을까??\n\n해당 내용은 Spring Container 어떻게 Bean을 관리하는지에 대한 개념을 알아야 이해 할 수 있으며 해당 개념을 필자도 알고 싶어서 조사해 봤다.  \n그냥 추가해야 된다는 것만 알고 넘어 가고 싶다면 다음 주제로 넘어가면 되고 Spring이 bean 관리 메커니즘에 대해 궁금 하다면 아래를 보자\n\n~~~ java\nimport org.quartz.spi.TriggerFiredBundle;\nimport org.springframework.beans.BeansException;\nimport org.springframework.beans.factory.config.AutowireCapableBeanFactory;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\nimport org.springframework.scheduling.quartz.SpringBeanJobFactory;\n\npublic class AutowiringSpringBeanJobFactory extends SpringBeanJobFactory implements ApplicationContextAware {\n\n\tprivate transient AutowireCapableBeanFactory beanFactory;\n\n\t@Override\n\tpublic void setApplicationContext(ApplicationContext applicationContext) throws BeansException {\n\t\tbeanFactory = applicationContext.getAutowireCapableBeanFactory();\n\t}\n\n\t@Override\n\tprotected Object createJobInstance(TriggerFiredBundle bundle) throws Exception {\n\t\tfinal Object job = super.createJobInstance(bundle);\n\t\tbeanFactory.autowireBean(job);\n\t\treturn job;\n\t}\n}\n~~~\n\n// TODO Posting spring은 어떻게 bean관리를 하는가\n\n\n## Quartz 실행 화면\n{% asset_img \"post-quartz-clustering-mode-log.png\" %}  \n\nquartz 셋팅을 마치고 was를 기동하면 위 로그와 같이 quartz 버전, 클러스터 모드 on/off 여부, Thread pool 갯수 등 정보가 나온다.  \ncluster mode가 제대로 동작한다면 노란색 박스 로그와 같이 설정한 check interval time에 맞게 로그가 계속 찍힐 것이다.  \n다른 서버가 살아있는지 계속 체크하고 있는 것이다. (로그를 볼때는 debug 레벨로 해야 보임)\n\n\n\n## 그 밖의\n\n### @DisallowConcurrentExecution\nThread Pool 기반으로 동작하는 Quatrz에서 Job에 대한 Thread 동시 접근으로 인해 데이터 중복을 방지하기 위한 어노테이션 인거 같다.\n나는 동시접근 못하게 코드로 막았는데 이런게 있는줄 알았으면 쉽게 해결했을거 같다.\n\n\n## 남은것은?\n- quartz 레퍼런스 문서를 더 꼼꼼히 보고 best pratice 데로 하고있는지 점검\n- quartz + spring batch 조합 해보기\n- 리펙토링","slug":"[quartz] 실시간 배치 동적 스케줄러 사용기","published":1,"updated":"2018-12-07T15:08:39.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjq5at3fx0009lwotztfz8ge7","content":"<h1><span id=\"어떤-시스템인가\">어떤 시스템인가</span></h1>\n<ul>\n<li>DB 접속하여 데이터를 실시간 주기로 데이터를 targetDB에 적재하는 스케줄러 배치 모듈</li>\n<li>서버 중단 없이 스케줄 주기 동적 변경</li>\n<li>서버 중단 없이 이관 DB 추가 하여 스케줄 배치 수행</li>\n<li>이관해야 하는 DB 접속수가 늘어나도 각각 스케쥴 배치 수행</li>\n<li>기본적 서버 이중화 이지만 서버가 늘어나도 서버별 스케줄 배치 수행 (서버 클러스터링)</li>\n<li>한쪽 서버가 죽어도 나머지 서버가 죽은 서버의 스케줄 배치 까지 수행</li>\n</ul>\n<h1><span id=\"왜-quartz를-사용-하였는가\">왜 Quartz를 사용 하였는가</span></h1>\n<img src=\"/2018/12/05/[quartz]%20실시간%20배치%20동적%20스케줄러%20사용기/post_clustering.jpg\">  \n<ul>\n<li>서버 클러스터링을 사용하기 위해</li>\n<li>서버 클러스터링이 필요한 이유는 만들고자 하는 배치 스케줄 모듈이 시간이 지날수록 이관해야 하는 DB가 늘어나는 만큼 서버 부하를 분산시키기 위해</li>\n</ul>\n<h2><span id=\"quartz-clsutering-동작-과정\">quartz clsutering 동작 과정</span></h2>\n<p>아래 표는 실제 서버를 각각 shutdown 시켜가면서 quartz clustering 동작을 눈으로 확인한 과정을 적은 것이다.</p>\n<img src=\"/2018/12/05/[quartz]%20실시간%20배치%20동적%20스케줄러%20사용기/post-quartz-clustering-mode-example.png\">  \n<h2><span id=\"그럼-도대체-clustering-기능은-어떻게-사용한단-말인가\">그럼 도대체 clustering 기능은 어떻게 사용한단 말인가</span></h2>\n<ul>\n<li>quartz 테이블 생성 <a href=\"https://goo.gl/HyRE2Q\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">[생성 스크립트 이동]</a></li>\n<li>quartz instance property 설정</li>\n<li>quartz jobStore property 설정  (property 설정 방법은 아래 quartz 설정 방법 부분 참고)</li>\n</ul>\n<p>Quartz instance property 에 대한 공식 설명을 먼저 보자</p>\n<blockquote>\n<p>org.quartz.scheduler.instanceName<br>\nCan be any string, and the value has no meaning to the scheduler itself - but rather serves as a mechanism for client code to distinguish schedulers when multiple instances are used within the same program. If you are using the clustering features, you must use the same name for every instance in the cluster that is ‘logically’ the same Scheduler.</p>\n</blockquote>\n<blockquote>\n<p>org.quartz.scheduler.instanceId<br>\nCan be any string, but must be unique for all schedulers working as if they are the same ‘logical’ Scheduler within a cluster. You may use the value “AUTO” as the instanceId if you wish the Id to be generated for you. Or the value “SYS_PROP” if you want the value to come from the system property “org.quartz.scheduler.instanceId”.</p>\n</blockquote>\n<p>정리하면 cluster mode를 사용하려면 같은 instanceName을 가진 서버별 고유에 instanceId를 가져야 cluster mode를 이용 할 수 있다는 뜻이다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// scheduler identity</span><br><span class=\"line\">org.quartz.scheduler.instanceName = QUAARTZ-SCHEDULER</span><br><span class=\"line\">org.quartz.scheduler.instanceId = MASTER</span><br><span class=\"line\"></span><br><span class=\"line\">// cluster 관련 설정</span><br><span class=\"line\">org.quartz.jobStore.misfireThreshold = 60000</span><br><span class=\"line\">org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class=\"line\">org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.MSSQLDelegate</span><br><span class=\"line\">org.quartz.jobStore.dataSource = myDS</span><br><span class=\"line\">org.quartz.jobStore.tablePrefix = QRTZ_</span><br><span class=\"line\">org.quartz.jobStore.isClustered = true</span><br><span class=\"line\">org.quartz.jobStore.clusterCheckinInterval = 1000</span><br></pre></td></tr></table></figure>\n<p>그 밖의 quartz config 설정은 <a href=\"https://goo.gl/jXEZfS\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">quartz 레퍼런스 문서</a>를 보는게 제일 정확하므로 참고하여 설정하면 된다.</p>\n<h1><span id=\"quartz-셋팅\">Quartz 셋팅</span></h1>\n<h2><span id=\"프로젝트-환경-및-버전\">프로젝트 환경 및 버전</span></h2>\n<p>Java8 + Spring 3.1.1 + Quartz 2.2.1 + Maven</p>\n<h2><span id=\"spring-4-일-경우는-아래-추가로-dependency-해주어야-한다\">Spring 4 일 경우는 아래 추가로 dependency 해주어야 한다.</span></h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>해주지 않으면  org.springframework.scheduling.quartz 패키지가 존재 하지 않는다. (Spring 3은 spring-context-support dependency 안해줘도 됨)</p>\n<h2><span id=\"quartz-spring-bean-등록\">Quartz Spring Bean 등록</span></h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBean <span class=\"title\">quartzScheduler</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tschedulerFactoryBean = <span class=\"keyword\">new</span> SchedulerFactoryBean();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tschedulerFactoryBean.setSchedulerName(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\tAutowiringSpringBeanJobFactory jobFactory = <span class=\"keyword\">new</span> AutowiringSpringBeanJobFactory();</span><br><span class=\"line\">\tjobFactory.setApplicationContext(applicationContext);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tschedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class=\"line\">\tschedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tschedulerFactoryBean.setOverwriteExistingJobs(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tschedulerFactoryBean.setAutoStartup(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tschedulerFactoryBean.setQuartzProperties(quartzProperties());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> schedulerFactoryBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2><span id=\"객체-설명\">객체 설명</span></h2>\n<h3><span id=\"schedulerfactorybean-객체-orgspringframeworkschedulingquartz\">SchedulerFactoryBean 객체 (org.springframework.scheduling.quartz)</span></h3>\n<p>Spring Framework에서 Quartz를 bean으로 관리하기 위해 필요한 클래스로 Spring에서 Quartz를 사용하기 위해 필요함</p>\n<h3><span id=\"autowiringspringbeanjobfactory-객체\">AutowiringSpringBeanJobFactory 객체</span></h3>\n<p>org.quartz.Job 을 implements한 Job 클래스내에서 @Autowired 할 수 있도록 하기 위해서 사용함</p>\n<h2><span id=\"왜-필요한가\">왜 필요한가</span></h2>\n<p>구현한 Job 클래스에서 주입 받아야 하는 경우가 반드시 존재 하기 때문이다.<br>\n예를 들면 DAO 클래스 이다. 필자 같은 경우는 데이터를 DB INSERT 해야하는 경우로 Job 클래스에 DAO를 반드시 주입받아야 하기에 반드시 필요했다.<br>\n만약 객체를 생성하지 않으면 @Autowired 해도 객체가 null 이다.</p>\n<h2><span id=\"그럼-왜-autowiringspringbeanjobfactory-객체-생성해야-autowired-할-수-있었을까\">그럼 왜 AutowiringSpringBeanJobFactory 객체 생성해야 @Autowired 할 수 있었을까??</span></h2>\n<p>해당 내용은 Spring Container 어떻게 Bean을 관리하는지에 대한 개념을 알아야 이해 할 수 있으며 해당 개념을 필자도 알고 싶어서 조사해 봤다.<br>\n그냥 추가해야 된다는 것만 알고 넘어 가고 싶다면 다음 주제로 넘어가면 되고 Spring이 bean 관리 메커니즘에 대해 궁금 하다면 아래를 보자</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.quartz.spi.TriggerFiredBundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.AutowireCapableBeanFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.quartz.SpringBeanJobFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutowiringSpringBeanJobFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBeanJobFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> AutowireCapableBeanFactory beanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">\t\tbeanFactory = applicationContext.getAutowireCapableBeanFactory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">createJobInstance</span><span class=\"params\">(TriggerFiredBundle bundle)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Object job = <span class=\"keyword\">super</span>.createJobInstance(bundle);</span><br><span class=\"line\">\t\tbeanFactory.autowireBean(job);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> job;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// TODO Posting spring은 어떻게 bean관리를 하는가</p>\n<h2><span id=\"quartz-실행-화면\">Quartz 실행 화면</span></h2>\n<img src=\"/2018/12/05/[quartz]%20실시간%20배치%20동적%20스케줄러%20사용기/post-quartz-clustering-mode-log.png\">  \n<p>quartz 셋팅을 마치고 was를 기동하면 위 로그와 같이 quartz 버전, 클러스터 모드 on/off 여부, Thread pool 갯수 등 정보가 나온다.<br>\ncluster mode가 제대로 동작한다면 노란색 박스 로그와 같이 설정한 check interval time에 맞게 로그가 계속 찍힐 것이다.<br>\n다른 서버가 살아있는지 계속 체크하고 있는 것이다. (로그를 볼때는 debug 레벨로 해야 보임)</p>\n<h2><span id=\"그-밖의\">그 밖의</span></h2>\n<h3><span id=\"disallowconcurrentexecution\">@DisallowConcurrentExecution</span></h3>\n<p>Thread Pool 기반으로 동작하는 Quatrz에서 Job에 대한 Thread 동시 접근으로 인해 데이터 중복을 방지하기 위한 어노테이션 인거 같다.<br>\n나는 동시접근 못하게 코드로 막았는데 이런게 있는줄 알았으면 쉽게 해결했을거 같다.</p>\n<h2><span id=\"남은것은\">남은것은?</span></h2>\n<ul>\n<li>quartz 레퍼런스 문서를 더 꼼꼼히 보고 best pratice 데로 하고있는지 점검</li>\n<li>quartz + spring batch 조합 해보기</li>\n<li>리펙토링</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1>어떤 시스템인가</h1>\n<ul>\n<li>DB 접속하여 데이터를 실시간 주기로 데이터를 targetDB에 적재하는 스케줄러 배치 모듈</li>\n<li>서버 중단 없이 스케줄 주기 동적 변경</li>\n<li>서버 중단 없이 이관 DB 추가 하여 스케줄 배치 수행</li>\n<li>이관해야 하는 DB 접속수가 늘어나도 각각 스케쥴 배치 수행</li>\n<li>기본적 서버 이중화 이지만 서버가 늘어나도 서버별 스케줄 배치 수행 (서버 클러스터링)</li>\n<li>한쪽 서버가 죽어도 나머지 서버가 죽은 서버의 스케줄 배치 까지 수행</li>\n</ul>\n<h1>왜 Quartz를 사용 하였는가</h1>\n<img src=\"/2018/12/05/[quartz]%20실시간%20배치%20동적%20스케줄러%20사용기/post_clustering.jpg\">  \n<ul>\n<li>서버 클러스터링을 사용하기 위해</li>\n<li>서버 클러스터링이 필요한 이유는 만들고자 하는 배치 스케줄 모듈이 시간이 지날수록 이관해야 하는 DB가 늘어나는 만큼 서버 부하를 분산시키기 위해</li>\n</ul>\n<h2>quartz clsutering 동작 과정</h2>\n<p>아래 표는 실제 서버를 각각 shutdown 시켜가면서 quartz clustering 동작을 눈으로 확인한 과정을 적은 것이다.</p>\n<img src=\"/2018/12/05/[quartz]%20실시간%20배치%20동적%20스케줄러%20사용기/post-quartz-clustering-mode-example.png\">  \n<h2>그럼 도대체 clustering 기능은 어떻게 사용한단 말인가</h2>\n<ul>\n<li>quartz 테이블 생성 <a href=\"https://goo.gl/HyRE2Q\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">[생성 스크립트 이동]</a></li>\n<li>quartz instance property 설정</li>\n<li>quartz jobStore property 설정  (property 설정 방법은 아래 quartz 설정 방법 부분 참고)</li>\n</ul>\n<p>Quartz instance property 에 대한 공식 설명을 먼저 보자</p>\n<blockquote>\n<p>org.quartz.scheduler.instanceName<br>\nCan be any string, and the value has no meaning to the scheduler itself - but rather serves as a mechanism for client code to distinguish schedulers when multiple instances are used within the same program. If you are using the clustering features, you must use the same name for every instance in the cluster that is ‘logically’ the same Scheduler.</p>\n</blockquote>\n<blockquote>\n<p>org.quartz.scheduler.instanceId<br>\nCan be any string, but must be unique for all schedulers working as if they are the same ‘logical’ Scheduler within a cluster. You may use the value “AUTO” as the instanceId if you wish the Id to be generated for you. Or the value “SYS_PROP” if you want the value to come from the system property “org.quartz.scheduler.instanceId”.</p>\n</blockquote>\n<p>정리하면 cluster mode를 사용하려면 같은 instanceName을 가진 서버별 고유에 instanceId를 가져야 cluster mode를 이용 할 수 있다는 뜻이다.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// scheduler identity</span><br><span class=\"line\">org.quartz.scheduler.instanceName = QUAARTZ-SCHEDULER</span><br><span class=\"line\">org.quartz.scheduler.instanceId = MASTER</span><br><span class=\"line\"></span><br><span class=\"line\">// cluster 관련 설정</span><br><span class=\"line\">org.quartz.jobStore.misfireThreshold = 60000</span><br><span class=\"line\">org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX</span><br><span class=\"line\">org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.MSSQLDelegate</span><br><span class=\"line\">org.quartz.jobStore.dataSource = myDS</span><br><span class=\"line\">org.quartz.jobStore.tablePrefix = QRTZ_</span><br><span class=\"line\">org.quartz.jobStore.isClustered = true</span><br><span class=\"line\">org.quartz.jobStore.clusterCheckinInterval = 1000</span><br></pre></td></tr></table></figure>\n<p>그 밖의 quartz config 설정은 <a href=\"https://goo.gl/jXEZfS\" rel=\"external nofollow noopener noreferrer\" target=\"_blank\">quartz 레퍼런스 문서</a>를 보는게 제일 정확하므로 참고하여 설정하면 된다.</p>\n<h1>Quartz 셋팅</h1>\n<h2>프로젝트 환경 및 버전</h2>\n<p>Java8 + Spring 3.1.1 + Quartz 2.2.1 + Maven</p>\n<h2>Spring 4 일 경우는 아래 추가로 dependency 해주어야 한다.</h2>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-context-support<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>4.0.0.RELEASE<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>해주지 않으면  org.springframework.scheduling.quartz 패키지가 존재 하지 않는다. (Spring 3은 spring-context-support dependency 안해줘도 됨)</p>\n<h2>Quartz Spring Bean 등록</h2>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> SchedulerFactoryBean <span class=\"title\">quartzScheduler</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\tschedulerFactoryBean = <span class=\"keyword\">new</span> SchedulerFactoryBean();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tschedulerFactoryBean.setSchedulerName(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">\tAutowiringSpringBeanJobFactory jobFactory = <span class=\"keyword\">new</span> AutowiringSpringBeanJobFactory();</span><br><span class=\"line\">\tjobFactory.setApplicationContext(applicationContext);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tschedulerFactoryBean.setJobFactory(jobFactory);</span><br><span class=\"line\">\tschedulerFactoryBean.setWaitForJobsToCompleteOnShutdown(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tschedulerFactoryBean.setOverwriteExistingJobs(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tschedulerFactoryBean.setAutoStartup(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">\tschedulerFactoryBean.setQuartzProperties(quartzProperties());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> schedulerFactoryBean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2>객체 설명</h2>\n<h3>SchedulerFactoryBean 객체 (org.springframework.scheduling.quartz)</h3>\n<p>Spring Framework에서 Quartz를 bean으로 관리하기 위해 필요한 클래스로 Spring에서 Quartz를 사용하기 위해 필요함</p>\n<h3>AutowiringSpringBeanJobFactory 객체</h3>\n<p>org.quartz.Job 을 implements한 Job 클래스내에서 @Autowired 할 수 있도록 하기 위해서 사용함</p>\n<h2>왜 필요한가</h2>\n<p>구현한 Job 클래스에서 주입 받아야 하는 경우가 반드시 존재 하기 때문이다.<br>\n예를 들면 DAO 클래스 이다. 필자 같은 경우는 데이터를 DB INSERT 해야하는 경우로 Job 클래스에 DAO를 반드시 주입받아야 하기에 반드시 필요했다.<br>\n만약 객체를 생성하지 않으면 @Autowired 해도 객체가 null 이다.</p>\n<h2>그럼 왜 AutowiringSpringBeanJobFactory 객체 생성해야 @Autowired 할 수 있었을까??</h2>\n<p>해당 내용은 Spring Container 어떻게 Bean을 관리하는지에 대한 개념을 알아야 이해 할 수 있으며 해당 개념을 필자도 알고 싶어서 조사해 봤다.<br>\n그냥 추가해야 된다는 것만 알고 넘어 가고 싶다면 다음 주제로 넘어가면 되고 Spring이 bean 관리 메커니즘에 대해 궁금 하다면 아래를 보자</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.quartz.spi.TriggerFiredBundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.BeansException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.beans.factory.config.AutowireCapableBeanFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.context.ApplicationContextAware;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.springframework.scheduling.quartz.SpringBeanJobFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutowiringSpringBeanJobFactory</span> <span class=\"keyword\">extends</span> <span class=\"title\">SpringBeanJobFactory</span> <span class=\"keyword\">implements</span> <span class=\"title\">ApplicationContextAware</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> AutowireCapableBeanFactory beanFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setApplicationContext</span><span class=\"params\">(ApplicationContext applicationContext)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">\t\tbeanFactory = applicationContext.getAutowireCapableBeanFactory();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Override</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">protected</span> Object <span class=\"title\">createJobInstance</span><span class=\"params\">(TriggerFiredBundle bundle)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">final</span> Object job = <span class=\"keyword\">super</span>.createJobInstance(bundle);</span><br><span class=\"line\">\t\tbeanFactory.autowireBean(job);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> job;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>// TODO Posting spring은 어떻게 bean관리를 하는가</p>\n<h2>Quartz 실행 화면</h2>\n<img src=\"/2018/12/05/[quartz]%20실시간%20배치%20동적%20스케줄러%20사용기/post-quartz-clustering-mode-log.png\">  \n<p>quartz 셋팅을 마치고 was를 기동하면 위 로그와 같이 quartz 버전, 클러스터 모드 on/off 여부, Thread pool 갯수 등 정보가 나온다.<br>\ncluster mode가 제대로 동작한다면 노란색 박스 로그와 같이 설정한 check interval time에 맞게 로그가 계속 찍힐 것이다.<br>\n다른 서버가 살아있는지 계속 체크하고 있는 것이다. (로그를 볼때는 debug 레벨로 해야 보임)</p>\n<h2>그 밖의</h2>\n<h3>@DisallowConcurrentExecution</h3>\n<p>Thread Pool 기반으로 동작하는 Quatrz에서 Job에 대한 Thread 동시 접근으로 인해 데이터 중복을 방지하기 위한 어노테이션 인거 같다.<br>\n나는 동시접근 못하게 코드로 막았는데 이런게 있는줄 알았으면 쉽게 해결했을거 같다.</p>\n<h2>남은것은?</h2>\n<ul>\n<li>quartz 레퍼런스 문서를 더 꼼꼼히 보고 best pratice 데로 하고있는지 점검</li>\n<li>quartz + spring batch 조합 해보기</li>\n<li>리펙토링</li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-log.png","slug":"post-quartz-clustering-mode-log.png","post":"cjq5at3fx0009lwotztfz8ge7","modified":0,"renderable":0},{"_id":"source/_posts/[meta] 새로운 개념 어떻게 습득해야 할까/bg_computer.jpg","slug":"bg_computer.jpg","post":"cjq5at3fr0003lwot7rkf1938","modified":0,"renderable":0},{"_id":"source/_posts/[meta] 개발자 어떻게 공부 해야 할까/bg_computer.jpg","slug":"bg_computer.jpg","post":"cjq5at3ft0005lwot73436mic","modified":0,"renderable":0},{"_id":"source/_posts/[spring]Spring AOP 적용시 주의사항/bg_computer.jpg","slug":"bg_computer.jpg","post":"cjq5at3fw0008lwotn3egezk0","modified":0,"renderable":0},{"_id":"source/_drafts/2018년 회고/bg_computer.jpg","slug":"bg_computer.jpg","post":"cjq5at3fn0001lwot1pgb6fpe","modified":0,"renderable":0},{"_id":"source/_drafts/2018년 회고/evernote.png","slug":"evernote.png","post":"cjq5at3fn0001lwot1pgb6fpe","modified":0,"renderable":0},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/bg_computer.jpg","slug":"bg_computer.jpg","post":"cjq5at3fx0009lwotztfz8ge7","modified":0,"renderable":0},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-example.png","slug":"post-quartz-clustering-mode-example.png","post":"cjq5at3fx0009lwotztfz8ge7","modified":0,"renderable":0},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post-quartz-clustering-mode-test.png","slug":"post-quartz-clustering-mode-test.png","post":"cjq5at3fx0009lwotztfz8ge7","modified":0,"renderable":0},{"_id":"source/_posts/[quartz] 실시간 배치 동적 스케줄러 사용기/post_clustering.jpg","slug":"post_clustering.jpg","post":"cjq5at3fx0009lwotztfz8ge7","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cjq5at3fr0003lwot7rkf1938","tag_id":"cjq5at3fv0007lwot1hdkhai7","_id":"cjq5at3g0000blwotpf4ar555"},{"post_id":"cjq5at3ft0005lwot73436mic","tag_id":"cjq5at3fz000alwotbzibg01r","_id":"cjq5at3g2000elwote0ga9erg"},{"post_id":"cjq5at3ft0005lwot73436mic","tag_id":"cjq5at3fv0007lwot1hdkhai7","_id":"cjq5at3g3000flwot517umtlz"},{"post_id":"cjq5at3fw0008lwotn3egezk0","tag_id":"cjq5at3g2000dlwotktuwyg5a","_id":"cjq5at3g5000ilwotahrpseor"},{"post_id":"cjq5at3fw0008lwotn3egezk0","tag_id":"cjq5at3g3000glwotdcgx10hw","_id":"cjq5at3g5000jlwot7wdvk940"},{"post_id":"cjq5at3fx0009lwotztfz8ge7","tag_id":"cjq5at3g4000hlwotw6mbt7qu","_id":"cjq5at3g6000llwotak6v7s13"},{"post_id":"cjq5at3fx0009lwotztfz8ge7","tag_id":"cjq5at3g5000klwottebnjfyg","_id":"cjq5at3g6000mlwothq9msif7"}],"Tag":[{"name":"메타","_id":"cjq5at3fv0007lwot1hdkhai7"},{"name":"개발일반","_id":"cjq5at3fz000alwotbzibg01r"},{"name":"Framework","_id":"cjq5at3g2000dlwotktuwyg5a"},{"name":"Spring","_id":"cjq5at3g3000glwotdcgx10hw"},{"name":"Library","_id":"cjq5at3g4000hlwotw6mbt7qu"},{"name":"Quartz","_id":"cjq5at3g5000klwottebnjfyg"}]}}